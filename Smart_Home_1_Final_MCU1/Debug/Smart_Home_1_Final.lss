
Smart_Home_1_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019a  00800060  000035ac  00003640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001fa  008001fa  000037da  2**0
                  ALLOC
  3 .stab         00003840  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001330  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000834c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000084ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000086de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000aae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000be6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d048  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_10>
      2c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <main>
      8a:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ee       	ldi	r22, 0xE9	; 233
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ad 1a 	jmp	0x355a	; 0x355a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 50       	subi	r30, 0x0F	; 15
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidConfigDir>:

#include "UART_Register.h"
#include "UART_Interface.h"

void UART_voidConfigDir()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTD , PIN0 , INPUT_PIN);
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD , PIN1 , OUTPUT_PIN);
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <UART_voidInit>:

void UART_voidInit()
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	/*Select the character size in bit 2*/
	CLR_BIT(UCSRB , UCSRB_UCSZ2);
     e58:	aa e2       	ldi	r26, 0x2A	; 42
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ea e2       	ldi	r30, 0x2A	; 42
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	8c 93       	st	X, r24
	 * - Asynchronous mode
	 * - no parity
	 * - 1 stop bit
	 * - 8 bit character size
	 * - polarity = 0*/
	UCSRC = 0b10000110;
     e66:	e0 e4       	ldi	r30, 0x40	; 64
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	86 e8       	ldi	r24, 0x86	; 134
     e6c:	80 83       	st	Z, r24

	/*Set the baudrate 9600 bps*/
	UBRRL = 51;
     e6e:	e9 e2       	ldi	r30, 0x29	; 41
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	83 e3       	ldi	r24, 0x33	; 51
     e74:	80 83       	st	Z, r24

	/*Enable the RX and TX*/
	SET_BIT(UCSRB , UCSRB_RXEN);
     e76:	aa e2       	ldi	r26, 0x2A	; 42
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ea e2       	ldi	r30, 0x2A	; 42
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 61       	ori	r24, 0x10	; 16
     e82:	8c 93       	st	X, r24
	SET_BIT(UCSRB , UCSRB_TXEN);
     e84:	aa e2       	ldi	r26, 0x2A	; 42
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ea e2       	ldi	r30, 0x2A	; 42
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	8c 93       	st	X, r24
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <UART_voidWriteData>:

void UART_voidWriteData(u8 Copy_u8Data)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting until the transmit buffer empty and ready for new data*/
	while(GET_BIT(UCSRA , UCSRA_UDRE) == 0);
     ea4:	eb e2       	ldi	r30, 0x2B	; 43
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	82 95       	swap	r24
     eac:	86 95       	lsr	r24
     eae:	87 70       	andi	r24, 0x07	; 7
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	90 70       	andi	r25, 0x00	; 0
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	a1 f3       	breq	.-24     	; 0xea4 <UART_voidWriteData+0xc>

	/*Put the new data*/
	UDR = Copy_u8Data;
     ebc:	ec e2       	ldi	r30, 0x2C	; 44
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 83       	st	Z, r24
}
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <UART_u8ReadData>:

u8 UART_u8ReadData()
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	/*Waiting until the receive buffer complete and the data be ready in UDR*/
	while(GET_BIT(UCSRA , UCSRA_RXC) == 0);
     ed4:	eb e2       	ldi	r30, 0x2B	; 43
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	dc f7       	brge	.-10     	; 0xed4 <UART_u8ReadData+0x8>

	/*Read or return the data */
	return UDR;
     ede:	ec e2       	ldi	r30, 0x2C	; 44
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <Timer1_voidInit>:

#include "TIMER1_Register.h"
#include "TIMER1_Interface.h"

void Timer1_voidInit()
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/*Select fast PWM non inverted */
	CLR_BIT(TCCR1A , TCCR1A_COM1A0);
     ef2:	af e4       	ldi	r26, 0x4F	; 79
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ef e4       	ldi	r30, 0x4F	; 79
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_COM1A1);
     f00:	af e4       	ldi	r26, 0x4F	; 79
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ef e4       	ldi	r30, 0x4F	; 79
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	8c 93       	st	X, r24

	/*Select mode 14 */
	CLR_BIT(TCCR1A , TCCR1A_WgM10);
     f0e:	af e4       	ldi	r26, 0x4F	; 79
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ef e4       	ldi	r30, 0x4F	; 79
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , TCCR1A_WGM11);
     f1c:	af e4       	ldi	r26, 0x4F	; 79
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ef e4       	ldi	r30, 0x4F	; 79
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	82 60       	ori	r24, 0x02	; 2
     f28:	8c 93       	st	X, r24

	SET_BIT(TCCR1B , TCCR1B_WGM12);
     f2a:	ae e4       	ldi	r26, 0x4E	; 78
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ee e4       	ldi	r30, 0x4E	; 78
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_WGM13);
     f38:	ae e4       	ldi	r26, 0x4E	; 78
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ee e4       	ldi	r30, 0x4E	; 78
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8c 93       	st	X, r24

	/*Select prescaler 8 */
	CLR_BIT(TCCR1B , TCCR1B_CS10);
     f46:	ae e4       	ldi	r26, 0x4E	; 78
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ee e4       	ldi	r30, 0x4E	; 78
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , TCCR1B_CS11);
     f54:	ae e4       	ldi	r26, 0x4E	; 78
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ee e4       	ldi	r30, 0x4E	; 78
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , TCCR1B_CS12);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8b 7f       	andi	r24, 0xFB	; 251
     f6e:	8c 93       	st	X, r24

	/*Set the number of the ticks for overflow 20000 */
	ICR1 = 20000;
     f70:	e6 e4       	ldi	r30, 0x46	; 70
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	9e e4       	ldi	r25, 0x4E	; 78
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24

	/*Set the number of the ticks for Compare match  750 */
	OCR1A = 750;
     f7c:	ea e4       	ldi	r30, 0x4A	; 74
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8e ee       	ldi	r24, 0xEE	; 238
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Timer1_voidSetCompareMatchValueChannalA>:

void Timer1_voidSetCompareMatchValueChannalA(u16 Copy_u16CompareValue)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <Timer1_voidSetCompareMatchValueChannalA+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
     f9c:	ea e4       	ldi	r30, 0x4A	; 74
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <Timer_voidTimer0Init>:

void (*Global_pvCallbackFuncTimer0) (void) = NULL;
void (*Global_pvCallbackFuncCTC0) (void) = NULL;

void Timer_voidTimer0Init()
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	/*Select normal mode */
	CLR_BIT(TCCR0 , TCCR0_WGM00);
     fba:	a3 e5       	ldi	r26, 0x53	; 83
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e3 e5       	ldi	r30, 0x53	; 83
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7b       	andi	r24, 0xBF	; 191
     fc6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_WGM01);
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	8c 93       	st	X, r24

	/*Select prescaler 8 */
	TCCR0 &= 0b11111000;
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 7f       	andi	r24, 0xF8	; 248
     fe2:	8c 93       	st	X, r24
	TCCR0 |= 0b00000010;
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24

	/*Set preload value*/
	TCNT0 = 192;
     ff2:	e2 e5       	ldi	r30, 0x52	; 82
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 ec       	ldi	r24, 0xC0	; 192
     ff8:	80 83       	st	Z, r24

	/*Enable Timer interrupt*/
	SET_BIT(TIMSK , TIMSK_TOIE0);
     ffa:	a9 e5       	ldi	r26, 0x59	; 89
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e9 e5       	ldi	r30, 0x59	; 89
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	8c 93       	st	X, r24
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <Timer_voidSetPreload>:

void Timer_voidSetPreload(u8 Copy_u8Preload)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    101a:	e2 e5       	ldi	r30, 0x52	; 82
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	80 83       	st	Z, r24
}
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <Timer_voidCallBackTimer0>:

void Timer_voidCallBackTimer0(void (*Copy_pvCallBack) (void))
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <Timer_voidCallBackTimer0+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	Global_pvCallbackFuncTimer0 = Copy_pvCallBack;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	90 93 fb 01 	sts	0x01FB, r25
    1040:	80 93 fa 01 	sts	0x01FA, r24
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <GIE_voidGlobalEnable>:
void GIE_voidGlobalEnable()
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	/*Enable the global Interrupt */
	SET_BIT(SREG , SREG_I);
    1056:	af e5       	ldi	r26, 0x5F	; 95
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ef e5       	ldi	r30, 0x5F	; 95
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	8c 93       	st	X, r24
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <Timer_voidCTCInit>:


void Timer_voidCTCInit()
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	/*select normal mode*/
	CLR_BIT(TCCR0, TCCR0_WGM00) ;
    1072:	a3 e5       	ldi	r26, 0x53	; 83
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e3 e5       	ldi	r30, 0x53	; 83
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7b       	andi	r24, 0xBF	; 191
    107e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01) ;
    1080:	a3 e5       	ldi	r26, 0x53	; 83
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	8c 93       	st	X, r24

	/*Select PRE Scalep 8*/
	CLR_BIT(TCCR0, TCCR0_CS00);
    108e:	a3 e5       	ldi	r26, 0x53	; 83
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e3 e5       	ldi	r30, 0x53	; 83
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8e 7f       	andi	r24, 0xFE	; 254
    109a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    109c:	a3 e5       	ldi	r26, 0x53	; 83
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e3 e5       	ldi	r30, 0x53	; 83
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	82 60       	ori	r24, 0x02	; 2
    10a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    10aa:	a3 e5       	ldi	r26, 0x53	; 83
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e3 e5       	ldi	r30, 0x53	; 83
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8b 7f       	andi	r24, 0xFB	; 251
    10b6:	8c 93       	st	X, r24

	/*set Compare values*/
	OCR0 = 200;
    10b8:	ec e5       	ldi	r30, 0x5C	; 92
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	88 ec       	ldi	r24, 0xC8	; 200
    10be:	80 83       	st	Z, r24

	/*Enable timer Interrupt*/
	SET_BIT (TIMSK, TIMSK_OCIE);
    10c0:	a9 e5       	ldi	r26, 0x59	; 89
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e9 e5       	ldi	r30, 0x59	; 89
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	82 60       	ori	r24, 0x02	; 2
    10cc:	8c 93       	st	X, r24
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <Timer_voidCallBackCTC0>:

void Timer_voidCallBackCTC0(void(*Copy_pvCallBack)(void))
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <Timer_voidCallBackCTC0+0x6>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
	Global_pvCallbackFuncCTC0 = Copy_pvCallBack;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	90 93 fd 01 	sts	0x01FD, r25
    10ea:	80 93 fc 01 	sts	0x01FC, r24
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <__vector_11>:

void __vector_11 (void) __attribute__ ((signal));
void __vector_11 (void)
{
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvCallbackFuncTimer0 != NULL)
    1122:	80 91 fa 01 	lds	r24, 0x01FA
    1126:	90 91 fb 01 	lds	r25, 0x01FB
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	29 f0       	breq	.+10     	; 0x1138 <__vector_11+0x40>
	{
		Global_pvCallbackFuncTimer0(); /*Calling*/
    112e:	e0 91 fa 01 	lds	r30, 0x01FA
    1132:	f0 91 fb 01 	lds	r31, 0x01FB
    1136:	09 95       	icall
	}
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_10>:

void __vector_10 (void) __attribute__ ((signal));
void __vector_10 (void)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvCallbackFuncCTC0 != NULL)
    1188:	80 91 fc 01 	lds	r24, 0x01FC
    118c:	90 91 fd 01 	lds	r25, 0x01FD
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	29 f0       	breq	.+10     	; 0x119e <__vector_10+0x40>
	{
		Global_pvCallbackFuncCTC0();
    1194:	e0 91 fc 01 	lds	r30, 0x01FC
    1198:	f0 91 fd 01 	lds	r31, 0x01FD
    119c:	09 95       	icall
	}
}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <DIO_voidSetPortDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"


void DIO_voidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_voidSetPortDirection+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <DIO_voidSetPortDirection+0x8>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3c 83       	std	Y+4, r19	; 0x04
    11dc:	2b 83       	std	Y+3, r18	; 0x03
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	d1 f0       	breq	.+52     	; 0x121c <DIO_voidSetPortDirection+0x58>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	2c f4       	brge	.+10     	; 0x11fc <DIO_voidSetPortDirection+0x38>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	61 f0       	breq	.+24     	; 0x1212 <DIO_voidSetPortDirection+0x4e>
    11fa:	1e c0       	rjmp	.+60     	; 0x1238 <DIO_voidSetPortDirection+0x74>
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	81 f0       	breq	.+32     	; 0x1226 <DIO_voidSetPortDirection+0x62>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	91 05       	cpc	r25, r1
    120e:	81 f0       	breq	.+32     	; 0x1230 <DIO_voidSetPortDirection+0x6c>
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <DIO_voidSetPortDirection+0x74>
	{
	 	 case DIO_PORTA : DDRA = Copy_u8Direction; break;
    1212:	ea e3       	ldi	r30, 0x3A	; 58
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <DIO_voidSetPortDirection+0x74>
	 	 case DIO_PORTB : DDRB = Copy_u8Direction; break;
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <DIO_voidSetPortDirection+0x74>
	 	 case DIO_PORTC : DDRC = Copy_u8Direction; break;
    1226:	e4 e3       	ldi	r30, 0x34	; 52
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 83       	st	Z, r24
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <DIO_voidSetPortDirection+0x74>
	 	 case DIO_PORTD : DDRD = Copy_u8Direction; break;
    1230:	e1 e3       	ldi	r30, 0x31	; 49
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 83       	st	Z, r24
	 	 default        :  break;
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <DIO_voidSetPortValue+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_voidSetPortValue+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	d1 f0       	breq	.+52     	; 0x129e <DIO_voidSetPortValue+0x58>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	2c f4       	brge	.+10     	; 0x127e <DIO_voidSetPortValue+0x38>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	61 f0       	breq	.+24     	; 0x1294 <DIO_voidSetPortValue+0x4e>
    127c:	1e c0       	rjmp	.+60     	; 0x12ba <DIO_voidSetPortValue+0x74>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <DIO_voidSetPortValue+0x62>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 05       	cpc	r25, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <DIO_voidSetPortValue+0x6c>
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <DIO_voidSetPortValue+0x74>
	{
		 case DIO_PORTA : PORTA = Copy_u8Value; break;
    1294:	eb e3       	ldi	r30, 0x3B	; 59
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <DIO_voidSetPortValue+0x74>
		 case DIO_PORTB : PORTB = Copy_u8Value; break;
    129e:	e8 e3       	ldi	r30, 0x38	; 56
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <DIO_voidSetPortValue+0x74>
		 case DIO_PORTC : PORTC = Copy_u8Value; break;
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <DIO_voidSetPortValue+0x74>
		 case DIO_PORTD : PORTD = Copy_u8Value; break;
    12b2:	e2 e3       	ldi	r30, 0x32	; 50
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	80 83       	st	Z, r24
		 default        :  break;
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	27 97       	sbiw	r28, 0x07	; 7
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	6a 83       	std	Y+2, r22	; 0x02
    12e0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == OUTPUT_PIN)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <DIO_voidSetPinDirection+0x22>
    12e8:	6f c0       	rjmp	.+222    	; 0x13c8 <DIO_voidSetPinDirection+0x100>
	{
		switch(Copy_u8Port)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3f 83       	std	Y+7, r19	; 0x07
    12f2:	2e 83       	std	Y+6, r18	; 0x06
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	49 f1       	breq	.+82     	; 0x1350 <DIO_voidSetPinDirection+0x88>
    12fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1300:	3f 81       	ldd	r19, Y+7	; 0x07
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <DIO_voidSetPinDirection+0x4a>
    1308:	8e 81       	ldd	r24, Y+6	; 0x06
    130a:	9f 81       	ldd	r25, Y+7	; 0x07
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <DIO_voidSetPinDirection+0x60>
    1310:	d2 c0       	rjmp	.+420    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
    1312:	2e 81       	ldd	r18, Y+6	; 0x06
    1314:	3f 81       	ldd	r19, Y+7	; 0x07
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	71 f1       	breq	.+92     	; 0x1378 <DIO_voidSetPinDirection+0xb0>
    131c:	8e 81       	ldd	r24, Y+6	; 0x06
    131e:	9f 81       	ldd	r25, Y+7	; 0x07
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	e9 f1       	breq	.+122    	; 0x13a0 <DIO_voidSetPinDirection+0xd8>
    1326:	c7 c0       	rjmp	.+398    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
		{
			 case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1328:	aa e3       	ldi	r26, 0x3A	; 58
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e3       	ldi	r30, 0x3A	; 58
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_voidSetPinDirection+0x7e>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_voidSetPinDirection+0x7a>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	b3 c0       	rjmp	.+358    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1350:	a7 e3       	ldi	r26, 0x37	; 55
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e7 e3       	ldi	r30, 0x37	; 55
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_voidSetPinDirection+0xa6>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_voidSetPinDirection+0xa2>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	9f c0       	rjmp	.+318    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1378:	a4 e3       	ldi	r26, 0x34	; 52
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e4 e3       	ldi	r30, 0x34	; 52
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_voidSetPinDirection+0xce>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_voidSetPinDirection+0xca>
    139a:	84 2b       	or	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	8b c0       	rjmp	.+278    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    13a0:	a1 e3       	ldi	r26, 0x31	; 49
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e1 e3       	ldi	r30, 0x31	; 49
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_voidSetPinDirection+0xf6>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_voidSetPinDirection+0xf2>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	77 c0       	rjmp	.+238    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 default        :  break;
		}

	}else if (Copy_u8Direction == INPUT_PIN)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 23       	and	r24, r24
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <DIO_voidSetPinDirection+0x108>
    13ce:	73 c0       	rjmp	.+230    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	59 f1       	breq	.+86     	; 0x143a <DIO_voidSetPinDirection+0x172>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_voidSetPinDirection+0x130>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f0       	breq	.+26     	; 0x1410 <DIO_voidSetPinDirection+0x148>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	89 f1       	breq	.+98     	; 0x1464 <DIO_voidSetPinDirection+0x19c>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_voidSetPinDirection+0x146>
    140c:	40 c0       	rjmp	.+128    	; 0x148e <DIO_voidSetPinDirection+0x1c6>
    140e:	53 c0       	rjmp	.+166    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
		{
			 case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1410:	aa e3       	ldi	r26, 0x3A	; 58
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ea e3       	ldi	r30, 0x3A	; 58
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_voidSetPinDirection+0x166>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_voidSetPinDirection+0x162>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	3e c0       	rjmp	.+124    	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    143a:	a7 e3       	ldi	r26, 0x37	; 55
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e7 e3       	ldi	r30, 0x37	; 55
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_voidSetPinDirection+0x190>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_voidSetPinDirection+0x18c>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	29 c0       	rjmp	.+82     	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1464:	a4 e3       	ldi	r26, 0x34	; 52
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_voidSetPinDirection+0x1ba>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_voidSetPinDirection+0x1b6>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <DIO_voidSetPinDirection+0x1ee>
			 case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    148e:	a1 e3       	ldi	r26, 0x31	; 49
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e1 e3       	ldi	r30, 0x31	; 49
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_voidSetPinDirection+0x1e4>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_voidSetPinDirection+0x1e0>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
			 default        :  break;
		}
	}
}
    14b6:	27 96       	adiw	r28, 0x07	; 7
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	27 97       	sbiw	r28, 0x07	; 7
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6a 83       	std	Y+2, r22	; 0x02
    14e0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == HIGH)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <DIO_voidSetPinValue+0x22>
    14e8:	6f c0       	rjmp	.+222    	; 0x15c8 <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8Port)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3f 83       	std	Y+7, r19	; 0x07
    14f2:	2e 83       	std	Y+6, r18	; 0x06
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	9f 81       	ldd	r25, Y+7	; 0x07
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	49 f1       	breq	.+82     	; 0x1550 <DIO_voidSetPinValue+0x88>
    14fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1500:	3f 81       	ldd	r19, Y+7	; 0x07
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <DIO_voidSetPinValue+0x4a>
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 f0       	breq	.+24     	; 0x1528 <DIO_voidSetPinValue+0x60>
    1510:	d2 c0       	rjmp	.+420    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
    1512:	2e 81       	ldd	r18, Y+6	; 0x06
    1514:	3f 81       	ldd	r19, Y+7	; 0x07
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	71 f1       	breq	.+92     	; 0x1578 <DIO_voidSetPinValue+0xb0>
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	9f 81       	ldd	r25, Y+7	; 0x07
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	e9 f1       	breq	.+122    	; 0x15a0 <DIO_voidSetPinValue+0xd8>
    1526:	c7 c0       	rjmp	.+398    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
		{
			 case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1528:	ab e3       	ldi	r26, 0x3B	; 59
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_voidSetPinValue+0x7e>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_voidSetPinValue+0x7a>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	b3 c0       	rjmp	.+358    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1550:	a8 e3       	ldi	r26, 0x38	; 56
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 e3       	ldi	r30, 0x38	; 56
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_voidSetPinValue+0xa6>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_voidSetPinValue+0xa2>
    1572:	84 2b       	or	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	9f c0       	rjmp	.+318    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1578:	a5 e3       	ldi	r26, 0x35	; 53
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_voidSetPinValue+0xce>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_voidSetPinValue+0xca>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	8b c0       	rjmp	.+278    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    15a0:	a2 e3       	ldi	r26, 0x32	; 50
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_voidSetPinValue+0xf6>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_voidSetPinValue+0xf2>
    15c2:	84 2b       	or	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	77 c0       	rjmp	.+238    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 default        :  break;
		}

	}else if (Copy_u8Value == LOW)
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	88 23       	and	r24, r24
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <DIO_voidSetPinValue+0x108>
    15ce:	73 c0       	rjmp	.+230    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8Port)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3d 83       	std	Y+5, r19	; 0x05
    15d8:	2c 83       	std	Y+4, r18	; 0x04
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	59 f1       	breq	.+86     	; 0x163a <DIO_voidSetPinValue+0x172>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <DIO_voidSetPinValue+0x130>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	69 f0       	breq	.+26     	; 0x1610 <DIO_voidSetPinValue+0x148>
    15f6:	5f c0       	rjmp	.+190    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
    15f8:	2c 81       	ldd	r18, Y+4	; 0x04
    15fa:	3d 81       	ldd	r19, Y+5	; 0x05
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	89 f1       	breq	.+98     	; 0x1664 <DIO_voidSetPinValue+0x19c>
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	9d 81       	ldd	r25, Y+5	; 0x05
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <DIO_voidSetPinValue+0x146>
    160c:	40 c0       	rjmp	.+128    	; 0x168e <DIO_voidSetPinValue+0x1c6>
    160e:	53 c0       	rjmp	.+166    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
		{
			 case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1610:	ab e3       	ldi	r26, 0x3B	; 59
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	eb e3       	ldi	r30, 0x3B	; 59
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidSetPinValue+0x166>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidSetPinValue+0x162>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	3e c0       	rjmp	.+124    	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    163a:	a8 e3       	ldi	r26, 0x38	; 56
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e8 e3       	ldi	r30, 0x38	; 56
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_voidSetPinValue+0x190>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_voidSetPinValue+0x18c>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	29 c0       	rjmp	.+82     	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1664:	a5 e3       	ldi	r26, 0x35	; 53
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e3       	ldi	r30, 0x35	; 53
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_voidSetPinValue+0x1ba>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_voidSetPinValue+0x1b6>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <DIO_voidSetPinValue+0x1ee>
			 case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_voidSetPinValue+0x1e4>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_voidSetPinValue+0x1e0>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24
			 default        :  break;
		}
	}
}
    16b6:	27 96       	adiw	r28, 0x07	; 7
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <DIO_u8GetPinValue>:


u8   DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin){
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <DIO_u8GetPinValue+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <DIO_u8GetPinValue+0x8>
    16d0:	0f 92       	push	r0
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnPinVlaue;

	switch(Copy_u8Port)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3d 83       	std	Y+5, r19	; 0x05
    16e2:	2c 83       	std	Y+4, r18	; 0x04
    16e4:	4c 81       	ldd	r20, Y+4	; 0x04
    16e6:	5d 81       	ldd	r21, Y+5	; 0x05
    16e8:	41 30       	cpi	r20, 0x01	; 1
    16ea:	51 05       	cpc	r21, r1
    16ec:	41 f1       	breq	.+80     	; 0x173e <DIO_u8GetPinValue+0x76>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	91 05       	cpc	r25, r1
    16f6:	34 f4       	brge	.+12     	; 0x1704 <DIO_u8GetPinValue+0x3c>
    16f8:	2c 81       	ldd	r18, Y+4	; 0x04
    16fa:	3d 81       	ldd	r19, Y+5	; 0x05
    16fc:	21 15       	cp	r18, r1
    16fe:	31 05       	cpc	r19, r1
    1700:	61 f0       	breq	.+24     	; 0x171a <DIO_u8GetPinValue+0x52>
    1702:	52 c0       	rjmp	.+164    	; 0x17a8 <DIO_u8GetPinValue+0xe0>
    1704:	4c 81       	ldd	r20, Y+4	; 0x04
    1706:	5d 81       	ldd	r21, Y+5	; 0x05
    1708:	42 30       	cpi	r20, 0x02	; 2
    170a:	51 05       	cpc	r21, r1
    170c:	51 f1       	breq	.+84     	; 0x1762 <DIO_u8GetPinValue+0x9a>
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	b9 f1       	breq	.+110    	; 0x1786 <DIO_u8GetPinValue+0xbe>
    1718:	47 c0       	rjmp	.+142    	; 0x17a8 <DIO_u8GetPinValue+0xe0>
	{
		case DIO_PORTA : Local_u8ReturnPinVlaue = GET_BIT(PINA,Copy_u8Pin); break;
    171a:	e9 e3       	ldi	r30, 0x39	; 57
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a9 01       	movw	r20, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_u8GetPinValue+0x6a>
    172e:	55 95       	asr	r21
    1730:	47 95       	ror	r20
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_u8GetPinValue+0x66>
    1736:	ca 01       	movw	r24, r20
    1738:	81 70       	andi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	35 c0       	rjmp	.+106    	; 0x17a8 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTB : Local_u8ReturnPinVlaue = GET_BIT(PINB,Copy_u8Pin); break;
    173e:	e6 e3       	ldi	r30, 0x36	; 54
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a9 01       	movw	r20, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_u8GetPinValue+0x8e>
    1752:	55 95       	asr	r21
    1754:	47 95       	ror	r20
    1756:	8a 95       	dec	r24
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_u8GetPinValue+0x8a>
    175a:	ca 01       	movw	r24, r20
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	23 c0       	rjmp	.+70     	; 0x17a8 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTC : Local_u8ReturnPinVlaue = GET_BIT(PINC,Copy_u8Pin); break;
    1762:	e3 e3       	ldi	r30, 0x33	; 51
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_u8GetPinValue+0xb2>
    1776:	55 95       	asr	r21
    1778:	47 95       	ror	r20
    177a:	8a 95       	dec	r24
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_u8GetPinValue+0xae>
    177e:	ca 01       	movw	r24, r20
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	11 c0       	rjmp	.+34     	; 0x17a8 <DIO_u8GetPinValue+0xe0>
		case DIO_PORTD : Local_u8ReturnPinVlaue = GET_BIT(PIND,Copy_u8Pin); break;
    1786:	e0 e3       	ldi	r30, 0x30	; 48
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a9 01       	movw	r20, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_u8GetPinValue+0xd6>
    179a:	55 95       	asr	r21
    179c:	47 95       	ror	r20
    179e:	8a 95       	dec	r24
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_u8GetPinValue+0xd2>
    17a2:	ca 01       	movw	r24, r20
    17a4:	81 70       	andi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
		default        :   break;
	}
	return Local_u8ReturnPinVlaue;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <ADC_voidInit>:
#include "ADC_Interface.h"
#include "ADC_Config.h"
#include "ADC_private.h"


void ADC_voidInit(void){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	ADMUX = ADC_REF <<6;	// Voltage reference source
    17c2:	e7 e2       	ldi	r30, 0x27	; 39
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	10 82       	st	Z, r1
	ADMUX |= ADC_LA  <<5;	// Left adjustment value
    17c8:	a7 e2       	ldi	r26, 0x27	; 39
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e7 e2       	ldi	r30, 0x27	; 39
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8c 93       	st	X, r24

	ADCSRA = ADATE <<5;		// Select the enable state of the auto trigger mode
    17d4:	e6 e2       	ldi	r30, 0x26	; 38
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	10 82       	st	Z, r1
	SET_BIT(ADCSRA, 4);		// Resets the ADC interrupt flag just in case
    17da:	a6 e2       	ldi	r26, 0x26	; 38
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e6 e2       	ldi	r30, 0x26	; 38
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 61       	ori	r24, 0x10	; 16
    17e6:	8c 93       	st	X, r24
	ADCSRA |= ADPS<<0;		// Configure the prescaler value of the ADC clock
    17e8:	a6 e2       	ldi	r26, 0x26	; 38
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e6 e2       	ldi	r30, 0x26	; 38
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	86 60       	ori	r24, 0x06	; 6
    17f4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 7);		// Enables the ADC
    17f6:	a6 e2       	ldi	r26, 0x26	; 38
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e6 e2       	ldi	r30, 0x26	; 38
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 68       	ori	r24, 0x80	; 128
    1802:	8c 93       	st	X, r24
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <ADC_u16Read>:


u16 ADC_u16Read(ADC_Channel_options_t Copy_u8ADCchannel){
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	89 83       	std	Y+1, r24	; 0x01

	/*Set the channel to ADMUX*/
	ADMUX &= 0b11100000;
    1816:	a7 e2       	ldi	r26, 0x27	; 39
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e7 e2       	ldi	r30, 0x27	; 39
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 7e       	andi	r24, 0xE0	; 224
    1822:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ADCchannel;
    1824:	a7 e2       	ldi	r26, 0x27	; 39
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e7 e2       	ldi	r30, 0x27	; 39
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	90 81       	ld	r25, Z
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	89 2b       	or	r24, r25
    1832:	8c 93       	st	X, r24

//	ADMUX |= Copy_u8ADCchannel<<0;	// Selects the ADC channel
	SET_BIT(ADCSRA, 6);				// Starts the ADC conversion
    1834:	a6 e2       	ldi	r26, 0x26	; 38
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e2       	ldi	r30, 0x26	; 38
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 64       	ori	r24, 0x40	; 64
    1840:	8c 93       	st	X, r24
	while(!GET_BIT(ADCSRA, 4));		// Wait until the conversion is completed
    1842:	e6 e2       	ldi	r30, 0x26	; 38
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	82 95       	swap	r24
    184a:	8f 70       	andi	r24, 0x0F	; 15
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	81 70       	andi	r24, 0x01	; 1
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	a9 f3       	breq	.-22     	; 0x1842 <ADC_u16Read+0x38>
	SET_BIT(ADCSRA, 4);				// Clear the ADC Interrupt Flag
    1858:	a6 e2       	ldi	r26, 0x26	; 38
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e6 e2       	ldi	r30, 0x26	; 38
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 61       	ori	r24, 0x10	; 16
    1864:	8c 93       	st	X, r24
	return ADC_DATA;
    1866:	e4 e2       	ldi	r30, 0x24	; 36
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
}
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <ADC_f32ADCtoVolt>:

f32 ADC_f32ADCtoVolt(u16 Copy_u16ADCVal){
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <ADC_f32ADCtoVolt+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <ADC_f32ADCtoVolt+0x8>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <ADC_f32ADCtoVolt+0xa>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
	f32 temp_f32VoltVal = (Copy_u16ADCVal/1024.0)*ADC_V_REF;
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	cc 01       	movw	r24, r24
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	54 e4       	ldi	r21, 0x44	; 68
    18aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 ea       	ldi	r20, 0xA0	; 160
    18bc:	50 e4       	ldi	r21, 0x40	; 64
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	ab 83       	std	Y+3, r26	; 0x03
    18cc:	bc 83       	std	Y+4, r27	; 0x04
	return temp_f32VoltVal;
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	ab 81       	ldd	r26, Y+3	; 0x03
    18d4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	26 96       	adiw	r28, 0x06	; 6
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LDR_void_LED_ConfigDir>:
#include "../LCD/LCD_interface.h"

#include "LDR.h"

void LDR_void_LED_ConfigDir()
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(DIO_PORTB, OUTPUT_PORT);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	6f ef       	ldi	r22, 0xFF	; 255
    18f8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_voidSetPortDirection>
}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <LDR_void_LED_CTRL>:

void LDR_void_LED_CTRL()
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	2b 97       	sbiw	r28, 0x0b	; 11
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_val = ADC_u16Read(ADC0);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	0e 94 05 0c 	call	0x180a	; 0x180a <ADC_u16Read>
    191c:	9b 87       	std	Y+11, r25	; 0x0b
    191e:	8a 87       	std	Y+10, r24	; 0x0a

	if (ADC_val >= 896)
    1920:	8a 85       	ldd	r24, Y+10	; 0x0a
    1922:	9b 85       	ldd	r25, Y+11	; 0x0b
    1924:	23 e0       	ldi	r18, 0x03	; 3
    1926:	80 38       	cpi	r24, 0x80	; 128
    1928:	92 07       	cpc	r25, r18
    192a:	80 f0       	brcs	.+32     	; 0x194c <LDR_void_LED_CTRL+0x4a>
	{
		DIO_voidSetPortValue(DIO_PORTB, 0xFF);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	6f ef       	ldi	r22, 0xFF	; 255
    1930:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPortValue>

		LCD_voidGoToXY(0,1);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    193c:	80 e6       	ldi	r24, 0x60	; 96
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('8');
    1944:	88 e3       	ldi	r24, 0x38	; 56
    1946:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    194a:	62 c1       	rjmp	.+708    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>
	}

	else if (ADC_val >= 768 && ADC_val <= 896)
    194c:	8a 85       	ldd	r24, Y+10	; 0x0a
    194e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1950:	23 e0       	ldi	r18, 0x03	; 3
    1952:	80 30       	cpi	r24, 0x00	; 0
    1954:	92 07       	cpc	r25, r18
    1956:	20 f1       	brcs	.+72     	; 0x19a0 <LDR_void_LED_CTRL+0x9e>
    1958:	8a 85       	ldd	r24, Y+10	; 0x0a
    195a:	9b 85       	ldd	r25, Y+11	; 0x0b
    195c:	23 e0       	ldi	r18, 0x03	; 3
    195e:	81 38       	cpi	r24, 0x81	; 129
    1960:	92 07       	cpc	r25, r18
    1962:	f0 f4       	brcc	.+60     	; 0x19a0 <LDR_void_LED_CTRL+0x9e>
	{
		for(u8 i = 0; i<7; i++)
    1964:	19 86       	std	Y+9, r1	; 0x09
    1966:	08 c0       	rjmp	.+16     	; 0x1978 <LDR_void_LED_CTRL+0x76>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	69 85       	ldd	r22, Y+9	; 0x09
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		LCD_voidSendData('8');
	}

	else if (ADC_val >= 768 && ADC_val <= 896)
	{
		for(u8 i = 0; i<7; i++)
    1972:	89 85       	ldd	r24, Y+9	; 0x09
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	89 87       	std	Y+9, r24	; 0x09
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	87 30       	cpi	r24, 0x07	; 7
    197c:	a8 f3       	brcs	.-22     	; 0x1968 <LDR_void_LED_CTRL+0x66>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}
		DIO_voidSetPinValue(DIO_PORTB, PIN7, LOW);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	67 e0       	ldi	r22, 0x07	; 7
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

		LCD_voidGoToXY(0,1);
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1990:	80 e6       	ldi	r24, 0x60	; 96
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('7');
    1998:	87 e3       	ldi	r24, 0x37	; 55
    199a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    199e:	38 c1       	rjmp	.+624    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>

	}

	else if (ADC_val >= 640 && ADC_val <= 768)
    19a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a4:	22 e0       	ldi	r18, 0x02	; 2
    19a6:	80 38       	cpi	r24, 0x80	; 128
    19a8:	92 07       	cpc	r25, r18
    19aa:	48 f1       	brcs	.+82     	; 0x19fe <LDR_void_LED_CTRL+0xfc>
    19ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b0:	23 e0       	ldi	r18, 0x03	; 3
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	92 07       	cpc	r25, r18
    19b6:	18 f5       	brcc	.+70     	; 0x19fe <LDR_void_LED_CTRL+0xfc>
	{
		for(u8 i = 0; i<6; i++)
    19b8:	18 86       	std	Y+8, r1	; 0x08
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <LDR_void_LED_CTRL+0xca>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	68 85       	ldd	r22, Y+8	; 0x08
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	}

	else if (ADC_val >= 640 && ADC_val <= 768)
	{
		for(u8 i = 0; i<6; i++)
    19c6:	88 85       	ldd	r24, Y+8	; 0x08
    19c8:	8f 5f       	subi	r24, 0xFF	; 255
    19ca:	88 87       	std	Y+8, r24	; 0x08
    19cc:	88 85       	ldd	r24, Y+8	; 0x08
    19ce:	86 30       	cpi	r24, 0x06	; 6
    19d0:	a8 f3       	brcs	.-22     	; 0x19bc <LDR_void_LED_CTRL+0xba>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}
		DIO_voidSetPinValue(DIO_PORTB, PIN6, LOW);
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	66 e0       	ldi	r22, 0x06	; 6
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, PIN7, LOW);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	67 e0       	ldi	r22, 0x07	; 7
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

		LCD_voidGoToXY(0,1);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    19ee:	80 e6       	ldi	r24, 0x60	; 96
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('6');
    19f6:	86 e3       	ldi	r24, 0x36	; 54
    19f8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    19fc:	09 c1       	rjmp	.+530    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>

	}

	else if (ADC_val >= 512 && ADC_val <= 640)
    19fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a02:	22 e0       	ldi	r18, 0x02	; 2
    1a04:	80 30       	cpi	r24, 0x00	; 0
    1a06:	92 07       	cpc	r25, r18
    1a08:	70 f1       	brcs	.+92     	; 0x1a66 <LDR_void_LED_CTRL+0x164>
    1a0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0e:	22 e0       	ldi	r18, 0x02	; 2
    1a10:	81 38       	cpi	r24, 0x81	; 129
    1a12:	92 07       	cpc	r25, r18
    1a14:	40 f5       	brcc	.+80     	; 0x1a66 <LDR_void_LED_CTRL+0x164>
	{
		for(u8 i = 0; i<5; i++)
    1a16:	1f 82       	std	Y+7, r1	; 0x07
    1a18:	08 c0       	rjmp	.+16     	; 0x1a2a <LDR_void_LED_CTRL+0x128>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	}

	else if (ADC_val >= 512 && ADC_val <= 640)
	{
		for(u8 i = 0; i<5; i++)
    1a24:	8f 81       	ldd	r24, Y+7	; 0x07
    1a26:	8f 5f       	subi	r24, 0xFF	; 255
    1a28:	8f 83       	std	Y+7, r24	; 0x07
    1a2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2c:	85 30       	cpi	r24, 0x05	; 5
    1a2e:	a8 f3       	brcs	.-22     	; 0x1a1a <LDR_void_LED_CTRL+0x118>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}
		DIO_voidSetPinValue(DIO_PORTB, PIN5, LOW);
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	65 e0       	ldi	r22, 0x05	; 5
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, PIN6, LOW);
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	66 e0       	ldi	r22, 0x06	; 6
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, PIN7, LOW);
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	67 e0       	ldi	r22, 0x07	; 7
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

		LCD_voidGoToXY(0,1);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1a56:	80 e6       	ldi	r24, 0x60	; 96
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('5');
    1a5e:	85 e3       	ldi	r24, 0x35	; 53
    1a60:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    1a64:	d5 c0       	rjmp	.+426    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>
	}

	else if (ADC_val >= 384 && ADC_val <= 512)
    1a66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6a:	21 e0       	ldi	r18, 0x01	; 1
    1a6c:	80 38       	cpi	r24, 0x80	; 128
    1a6e:	92 07       	cpc	r25, r18
    1a70:	78 f1       	brcs	.+94     	; 0x1ad0 <LDR_void_LED_CTRL+0x1ce>
    1a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a76:	22 e0       	ldi	r18, 0x02	; 2
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	92 07       	cpc	r25, r18
    1a7c:	48 f5       	brcc	.+82     	; 0x1ad0 <LDR_void_LED_CTRL+0x1ce>
	{
		for(u8 i = 0; i<4; i++)
    1a7e:	1e 82       	std	Y+6, r1	; 0x06
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <LDR_void_LED_CTRL+0x190>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	6e 81       	ldd	r22, Y+6	; 0x06
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		LCD_voidSendData('5');
	}

	else if (ADC_val >= 384 && ADC_val <= 512)
	{
		for(u8 i = 0; i<4; i++)
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	8f 5f       	subi	r24, 0xFF	; 255
    1a90:	8e 83       	std	Y+6, r24	; 0x06
    1a92:	8e 81       	ldd	r24, Y+6	; 0x06
    1a94:	84 30       	cpi	r24, 0x04	; 4
    1a96:	a8 f3       	brcs	.-22     	; 0x1a82 <LDR_void_LED_CTRL+0x180>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}

		for(u8 i = 0; i<4; i++)
    1a98:	1d 82       	std	Y+5, r1	; 0x05
    1a9a:	0b c0       	rjmp	.+22     	; 0x1ab2 <LDR_void_LED_CTRL+0x1b0>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN4 + i, LOW);
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	9c 5f       	subi	r25, 0xFC	; 252
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	69 2f       	mov	r22, r25
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		for(u8 i = 0; i<4; i++)
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}

		for(u8 i = 0; i<4; i++)
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	90 f3       	brcs	.-28     	; 0x1a9c <LDR_void_LED_CTRL+0x19a>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN4 + i, LOW);
		}

		LCD_voidGoToXY(0,1);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1ac0:	80 e6       	ldi	r24, 0x60	; 96
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('4');
    1ac8:	84 e3       	ldi	r24, 0x34	; 52
    1aca:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    1ace:	a0 c0       	rjmp	.+320    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>

	}

	else if (ADC_val >= 256 && ADC_val <= 384)
    1ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	81 f1       	breq	.+96     	; 0x1b3a <LDR_void_LED_CTRL+0x238>
    1ada:	78 f1       	brcs	.+94     	; 0x1b3a <LDR_void_LED_CTRL+0x238>
    1adc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ade:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae0:	21 e0       	ldi	r18, 0x01	; 1
    1ae2:	81 38       	cpi	r24, 0x81	; 129
    1ae4:	92 07       	cpc	r25, r18
    1ae6:	48 f5       	brcc	.+82     	; 0x1b3a <LDR_void_LED_CTRL+0x238>
	{
		for(u8 i = 0; i<3; i++)
    1ae8:	1c 82       	std	Y+4, r1	; 0x04
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <LDR_void_LED_CTRL+0x1fa>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	6c 81       	ldd	r22, Y+4	; 0x04
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	}

	else if (ADC_val >= 256 && ADC_val <= 384)
	{
		for(u8 i = 0; i<3; i++)
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	8c 83       	std	Y+4, r24	; 0x04
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	a8 f3       	brcs	.-22     	; 0x1aec <LDR_void_LED_CTRL+0x1ea>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}

		for(u8 i = 0; i<5; i++)
    1b02:	1b 82       	std	Y+3, r1	; 0x03
    1b04:	0b c0       	rjmp	.+22     	; 0x1b1c <LDR_void_LED_CTRL+0x21a>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN3 + i, LOW);
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	98 2f       	mov	r25, r24
    1b0a:	9d 5f       	subi	r25, 0xFD	; 253
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	69 2f       	mov	r22, r25
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		for(u8 i = 0; i<3; i++)
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN0 + i, HIGH);
		}

		for(u8 i = 0; i<5; i++)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	85 30       	cpi	r24, 0x05	; 5
    1b20:	90 f3       	brcs	.-28     	; 0x1b06 <LDR_void_LED_CTRL+0x204>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN3 + i, LOW);
		}

		LCD_voidGoToXY(0,1);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1b2a:	80 e6       	ldi	r24, 0x60	; 96
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('3');
    1b32:	83 e3       	ldi	r24, 0x33	; 51
    1b34:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    1b38:	6b c0       	rjmp	.+214    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>
	}

	else if (ADC_val >= 128 && ADC_val <= 256)
    1b3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b3e:	80 38       	cpi	r24, 0x80	; 128
    1b40:	91 05       	cpc	r25, r1
    1b42:	60 f1       	brcs	.+88     	; 0x1b9c <LDR_void_LED_CTRL+0x29a>
    1b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b48:	21 e0       	ldi	r18, 0x01	; 1
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	92 07       	cpc	r25, r18
    1b4e:	30 f5       	brcc	.+76     	; 0x1b9c <LDR_void_LED_CTRL+0x29a>
	{
		DIO_voidSetPinValue(DIO_PORTB, PIN0, HIGH);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTB, PIN1, HIGH);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

		for(u8 i = 0; i<6; i++)
    1b64:	1a 82       	std	Y+2, r1	; 0x02
    1b66:	0b c0       	rjmp	.+22     	; 0x1b7e <LDR_void_LED_CTRL+0x27c>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN2 + i, LOW);
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	9e 5f       	subi	r25, 0xFE	; 254
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	69 2f       	mov	r22, r25
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
	else if (ADC_val >= 128 && ADC_val <= 256)
	{
		DIO_voidSetPinValue(DIO_PORTB, PIN0, HIGH);
		DIO_voidSetPinValue(DIO_PORTB, PIN1, HIGH);

		for(u8 i = 0; i<6; i++)
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	86 30       	cpi	r24, 0x06	; 6
    1b82:	90 f3       	brcs	.-28     	; 0x1b68 <LDR_void_LED_CTRL+0x266>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN2 + i, LOW);
		}

		LCD_voidGoToXY(0,1);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1b8c:	80 e6       	ldi	r24, 0x60	; 96
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('2');
    1b94:	82 e3       	ldi	r24, 0x32	; 50
    1b96:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    1b9a:	3a c0       	rjmp	.+116    	; 0x1c10 <LDR_void_LED_CTRL+0x30e>
	}

	else if (ADC_val >= 64 && ADC_val <= 128)
    1b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ba0:	80 34       	cpi	r24, 0x40	; 64
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	30 f1       	brcs	.+76     	; 0x1bf2 <LDR_void_LED_CTRL+0x2f0>
    1ba6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1baa:	81 38       	cpi	r24, 0x81	; 129
    1bac:	91 05       	cpc	r25, r1
    1bae:	08 f5       	brcc	.+66     	; 0x1bf2 <LDR_void_LED_CTRL+0x2f0>
	{
		DIO_voidSetPinValue(DIO_PORTB, PIN0, HIGH);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		for(u8 i = 0; i<7; i++)
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	0b c0       	rjmp	.+22     	; 0x1bd4 <LDR_void_LED_CTRL+0x2d2>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN1 + i, LOW);
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	9f 5f       	subi	r25, 0xFF	; 255
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	69 2f       	mov	r22, r25
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
	}

	else if (ADC_val >= 64 && ADC_val <= 128)
	{
		DIO_voidSetPinValue(DIO_PORTB, PIN0, HIGH);
		for(u8 i = 0; i<7; i++)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	87 30       	cpi	r24, 0x07	; 7
    1bd8:	90 f3       	brcs	.-28     	; 0x1bbe <LDR_void_LED_CTRL+0x2bc>
		{
			DIO_voidSetPinValue(DIO_PORTB, PIN1 + i, LOW);
		}

		LCD_voidGoToXY(0,1);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1be2:	80 e6       	ldi	r24, 0x60	; 96
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('1');
    1bea:	81 e3       	ldi	r24, 0x31	; 49
    1bec:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <LDR_void_LED_CTRL+0x30e>
	}

	else
	{
		DIO_voidSetPortValue(DIO_PORTB, 0x00);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPortValue>

		LCD_voidGoToXY(0,1);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("ON-LEDs=");
    1c02:	80 e6       	ldi	r24, 0x60	; 96
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidSendData('0');
    1c0a:	80 e3       	ldi	r24, 0x30	; 48
    1c0c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
	}
}
    1c10:	2b 96       	adiw	r28, 0x0b	; 11
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <LCD_voidSendCommand>:

#include "LCD_Config.h"
#include "LCD_Interface.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	2f 97       	sbiw	r28, 0x0f	; 15
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,LOW);
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	62 e0       	ldi	r22, 0x02	; 2
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c50:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPortValue>

	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_E_PIN,HIGH);
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	64 e0       	ldi	r22, 0x04	; 4
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e0       	ldi	r26, 0x00	; 0
    1c64:	b0 e4       	ldi	r27, 0x40	; 64
    1c66:	8b 87       	std	Y+11, r24	; 0x0b
    1c68:	9c 87       	std	Y+12, r25	; 0x0c
    1c6a:	ad 87       	std	Y+13, r26	; 0x0d
    1c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	53 e4       	ldi	r21, 0x43	; 67
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8f 83       	std	Y+7, r24	; 0x07
    1c88:	98 87       	std	Y+8, r25	; 0x08
    1c8a:	a9 87       	std	Y+9, r26	; 0x09
    1c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	78 85       	ldd	r23, Y+8	; 0x08
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <LCD_voidSendCommand+0xee>
    1cf2:	89 e1       	ldi	r24, 0x19	; 25
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_voidSendCommand+0xdc>
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <LCD_voidSendCommand+0xd0>
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1c:	78 85       	ldd	r23, Y+8	; 0x08
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_voidSendCommand+0x118>
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_E_PIN,LOW);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	64 e0       	ldi	r22, 0x04	; 4
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
}
    1d4c:	2f 96       	adiw	r28, 0x0f	; 15
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	2f 97       	sbiw	r28, 0x0f	; 15
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_RS_PIN,HIGH);
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	62 e0       	ldi	r22, 0x02	; 2
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_RW_PIN,LOW);
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	63 e0       	ldi	r22, 0x03	; 3
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d8c:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPortValue>

	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_E_PIN,HIGH);
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	64 e0       	ldi	r22, 0x04	; 4
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	b0 e4       	ldi	r27, 0x40	; 64
    1da2:	8b 87       	std	Y+11, r24	; 0x0b
    1da4:	9c 87       	std	Y+12, r25	; 0x0c
    1da6:	ad 87       	std	Y+13, r26	; 0x0d
    1da8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a e7       	ldi	r20, 0x7A	; 122
    1db8:	53 e4       	ldi	r21, 0x43	; 67
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	8f 83       	std	Y+7, r24	; 0x07
    1dc4:	98 87       	std	Y+8, r25	; 0x08
    1dc6:	a9 87       	std	Y+9, r26	; 0x09
    1dc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	2c f4       	brge	.+10     	; 0x1dec <LCD_voidSendData+0x8e>
		__ticks = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	3f c0       	rjmp	.+126    	; 0x1e6a <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	4c f5       	brge	.+82     	; 0x1e56 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <LCD_voidSendData+0xee>
    1e2e:	89 e1       	ldi	r24, 0x19	; 25
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9c 83       	std	Y+4, r25	; 0x04
    1e34:	8b 83       	std	Y+3, r24	; 0x03
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_voidSendData+0xdc>
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <LCD_voidSendData+0xd0>
    1e54:	14 c0       	rjmp	.+40     	; 0x1e7e <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD_voidSendData+0x118>
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CRTL_PORT,LCD_E_PIN,LOW);
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	64 e0       	ldi	r22, 0x04	; 4
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
}
    1e88:	2f 96       	adiw	r28, 0x0f	; 15
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_voidInit>:

void LCD_voidInit(void)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	ac e0       	ldi	r26, 0x0C	; 12
    1eb4:	b2 e4       	ldi	r27, 0x42	; 66
    1eb6:	8b 87       	std	Y+11, r24	; 0x0b
    1eb8:	9c 87       	std	Y+12, r25	; 0x0c
    1eba:	ad 87       	std	Y+13, r26	; 0x0d
    1ebc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a e7       	ldi	r20, 0x7A	; 122
    1ecc:	53 e4       	ldi	r21, 0x43	; 67
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8f 83       	std	Y+7, r24	; 0x07
    1ed8:	98 87       	std	Y+8, r25	; 0x08
    1eda:	a9 87       	std	Y+9, r26	; 0x09
    1edc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ede:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee0:	78 85       	ldd	r23, Y+8	; 0x08
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <LCD_voidInit+0x66>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f00:	6f 81       	ldd	r22, Y+7	; 0x07
    1f02:	78 85       	ldd	r23, Y+8	; 0x08
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LCD_voidInit+0xc6>
    1f42:	89 e1       	ldi	r24, 0x19	; 25
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	8b 83       	std	Y+3, r24	; 0x03
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_voidInit+0xb4>
    1f52:	9c 83       	std	Y+4, r25	; 0x04
    1f54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <LCD_voidInit+0xa8>
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_voidInit+0xf0>
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	/*-----------Send Command function Call-----------*/
	/*-------2 Lines with size (5x8) 0b00111100----- */
	LCD_voidSendCommand(0x3C);
    1f92:	8c e3       	ldi	r24, 0x3C	; 60
    1f94:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
//	LCD_voidSendCommand(0b00111000);

	/*----------NO Cursor with NO blink 0b00001100---*/
	LCD_voidSendCommand(0x0C);
    1f98:	8c e0       	ldi	r24, 0x0C	; 12
    1f9a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
//	LCD_voidSendCommand(0b00001100);

	/*-------------------clear Display--0b00000001----*/
	LCD_voidSendCommand(0x01);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
}
    1fa4:	2e 96       	adiw	r28, 0x0e	; 14
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_voidConfigDir>:

void LCD_voidConfigDir(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(DIO_PORTC,OUTPUT_PORT);
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	6f ef       	ldi	r22, 0xFF	; 255
    1fc2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_PORTD,LCD_RS_PIN ,OUTPUT_PIN);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	62 e0       	ldi	r22, 0x02	; 2
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,LCD_RW_PIN ,OUTPUT_PIN);
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	63 e0       	ldi	r22, 0x03	; 3
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,LCD_E_PIN ,OUTPUT_PIN);
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	64 e0       	ldi	r22, 0x04	; 4
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *Copy_u8String)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <LCD_voidWriteString+0x6>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	9b 83       	std	Y+3, r25	; 0x03
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1ffa:	19 82       	std	Y+1, r1	; 0x01
    1ffc:	0e c0       	rjmp	.+28     	; 0x201a <LCD_voidWriteString+0x30>
	while(Copy_u8String[i] != '\0')
	{
		LCD_voidSendData(Copy_u8String[i]);
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	9b 81       	ldd	r25, Y+3	; 0x03
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	80 81       	ld	r24, Z
    2010:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
		i++;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	8f 5f       	subi	r24, 0xFF	; 255
    2018:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8 *Copy_u8String)
{
	u8 i=0;
	while(Copy_u8String[i] != '\0')
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	fc 01       	movw	r30, r24
    2026:	e2 0f       	add	r30, r18
    2028:	f3 1f       	adc	r31, r19
    202a:	80 81       	ld	r24, Z
    202c:	88 23       	and	r24, r24
    202e:	39 f7       	brne	.-50     	; 0x1ffe <LCD_voidWriteString+0x14>
	{
		LCD_voidSendData(Copy_u8String[i]);
		i++;
	}
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <LCD_voidGoToXY+0x6>
    2042:	0f 92       	push	r0
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	8a 83       	std	Y+2, r24	; 0x02
    204a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAM_Address;
	if(Copy_u8YPos == 0)
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	88 23       	and	r24, r24
    2050:	19 f4       	brne	.+6      	; 0x2058 <LCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAM_Address = Copy_u8XPos;
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <LCD_voidGoToXY+0x28>
	}else if(Copy_u8YPos == 1)
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	19 f4       	brne	.+6      	; 0x2064 <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address = Copy_u8XPos + 0x40;
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	80 5c       	subi	r24, 0xC0	; 192
    2062:	89 83       	std	Y+1, r24	; 0x01
	}
	// Local_u8DDRAM_Address = Copy_u8XPos*Copy_u8YPos + 0x40;
	Local_u8DDRAM_Address = Local_u8DDRAM_Address + 128;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	80 58       	subi	r24, 0x80	; 128
    2068:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8DDRAM_Address);
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8 *Copy_u8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	27 97       	sbiw	r28, 0x07	; 7
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
    2094:	6d 83       	std	Y+5, r22	; 0x05
    2096:	4e 83       	std	Y+6, r20	; 0x06
    2098:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber * 8;
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand(Local_u8CGRAM_Address+64);
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	80 5c       	subi	r24, 0xC0	; 192
    20b2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>

	for(u8 Local_u8Counter=0; Local_u8Counter <8 ; Local_u8Counter++)
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <LCD_voidWriteSpecialCharacter+0x5a>
	{
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	fc 01       	movw	r30, r24
    20c6:	e2 0f       	add	r30, r18
    20c8:	f3 1f       	adc	r31, r19
    20ca:	80 81       	ld	r24, Z
    20cc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
{
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber * 8;

	LCD_voidSendCommand(Local_u8CGRAM_Address+64);

	for(u8 Local_u8Counter=0; Local_u8Counter <8 ; Local_u8Counter++)
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	88 30       	cpi	r24, 0x08	; 8
    20da:	78 f3       	brcs	.-34     	; 0x20ba <LCD_voidWriteSpecialCharacter+0x3e>
	{
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
	}

	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    20dc:	8e 81       	ldd	r24, Y+6	; 0x06
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>

	LCD_voidSendData(Local_u8CGRAM_Address);
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>

}
    20ea:	27 96       	adiw	r28, 0x07	; 7
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	2f 97       	sbiw	r28, 0x0f	; 15
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	6c 87       	std	Y+12, r22	; 0x0c
    2116:	7d 87       	std	Y+13, r23	; 0x0d
    2118:	8e 87       	std	Y+14, r24	; 0x0e
    211a:	9f 87       	std	Y+15, r25	; 0x0f
	/*if(Copy_u32Number !=0)
	{
		LCD_voidWriteNumber(Copy_u32Number/10);
		LCD_voidSendData((Copy_u32Number%10) + 48);
	}*/
	u8 Local_u8BaseNumbers[10]={0};
    211c:	8a e0       	ldi	r24, 0x0A	; 10
    211e:	fe 01       	movw	r30, r28
    2120:	32 96       	adiw	r30, 0x02	; 2
    2122:	df 01       	movw	r26, r30
    2124:	98 2f       	mov	r25, r24
    2126:	1d 92       	st	X+, r1
    2128:	9a 95       	dec	r25
    212a:	e9 f7       	brne	.-6      	; 0x2126 <LCD_voidWriteNumber+0x2a>

	u8 Local_u8Counter=9;
    212c:	89 e0       	ldi	r24, 0x09	; 9
    212e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number == 0)
    2130:	8c 85       	ldd	r24, Y+12	; 0x0c
    2132:	9d 85       	ldd	r25, Y+13	; 0x0d
    2134:	ae 85       	ldd	r26, Y+14	; 0x0e
    2136:	bf 85       	ldd	r27, Y+15	; 0x0f
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	a1 05       	cpc	r26, r1
    213c:	b1 05       	cpc	r27, r1
    213e:	89 f5       	brne	.+98     	; 0x21a2 <LCD_voidWriteNumber+0xa6>
	{
		LCD_voidSendData(48);
    2140:	80 e3       	ldi	r24, 0x30	; 48
    2142:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    2146:	2d c0       	rjmp	.+90     	; 0x21a2 <LCD_voidWriteNumber+0xa6>
	}

	while(Copy_u32Number !=0)
	{
		Local_u8BaseNumbers[Local_u8Counter]= Copy_u32Number % 10;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	08 2f       	mov	r16, r24
    214c:	10 e0       	ldi	r17, 0x00	; 0
    214e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2150:	9d 85       	ldd	r25, Y+13	; 0x0d
    2152:	ae 85       	ldd	r26, Y+14	; 0x0e
    2154:	bf 85       	ldd	r27, Y+15	; 0x0f
    2156:	2a e0       	ldi	r18, 0x0A	; 10
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__udivmodsi4>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	28 2f       	mov	r18, r24
    216c:	ce 01       	movw	r24, r28
    216e:	02 96       	adiw	r24, 0x02	; 2
    2170:	fc 01       	movw	r30, r24
    2172:	e0 0f       	add	r30, r16
    2174:	f1 1f       	adc	r31, r17
    2176:	20 83       	st	Z, r18

		Copy_u32Number /= 10;
    2178:	8c 85       	ldd	r24, Y+12	; 0x0c
    217a:	9d 85       	ldd	r25, Y+13	; 0x0d
    217c:	ae 85       	ldd	r26, Y+14	; 0x0e
    217e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2180:	2a e0       	ldi	r18, 0x0A	; 10
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__udivmodsi4>
    2190:	da 01       	movw	r26, r20
    2192:	c9 01       	movw	r24, r18
    2194:	8c 87       	std	Y+12, r24	; 0x0c
    2196:	9d 87       	std	Y+13, r25	; 0x0d
    2198:	ae 87       	std	Y+14, r26	; 0x0e
    219a:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8Counter--;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	81 50       	subi	r24, 0x01	; 1
    21a0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u32Number == 0)
	{
		LCD_voidSendData(48);
	}

	while(Copy_u32Number !=0)
    21a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    21a6:	ae 85       	ldd	r26, Y+14	; 0x0e
    21a8:	bf 85       	ldd	r27, Y+15	; 0x0f
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	a1 05       	cpc	r26, r1
    21ae:	b1 05       	cpc	r27, r1
    21b0:	59 f6       	brne	.-106    	; 0x2148 <LCD_voidWriteNumber+0x4c>

		Copy_u32Number /= 10;
		Local_u8Counter--;
	}

	for(Local_u8Counter++ ; Local_u8Counter <10 ; Local_u8Counter++ )
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	8f 5f       	subi	r24, 0xFF	; 255
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_voidWriteNumber+0xdc>
	{

			LCD_voidSendData(Local_u8BaseNumbers[Local_u8Counter]+48);
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	ce 01       	movw	r24, r28
    21c2:	02 96       	adiw	r24, 0x02	; 2
    21c4:	fc 01       	movw	r30, r24
    21c6:	e2 0f       	add	r30, r18
    21c8:	f3 1f       	adc	r31, r19
    21ca:	80 81       	ld	r24, Z
    21cc:	80 5d       	subi	r24, 0xD0	; 208
    21ce:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>

		Copy_u32Number /= 10;
		Local_u8Counter--;
	}

	for(Local_u8Counter++ ; Local_u8Counter <10 ; Local_u8Counter++ )
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	8a 30       	cpi	r24, 0x0A	; 10
    21dc:	70 f3       	brcs	.-36     	; 0x21ba <LCD_voidWriteNumber+0xbe>
	{

			LCD_voidSendData(Local_u8BaseNumbers[Local_u8Counter]+48);
	}
}
    21de:	2f 96       	adiw	r28, 0x0f	; 15
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	08 95       	ret

000021f4 <TEMPFAN_Init>:
#include "../../MCAL/ADC/ADC_interface.h"

#include <util/delay.h>

void TEMPFAN_Init()
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTA, PIN2, OUTPUT_PIN);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
}
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <TEMP_FAN>:

void TEMP_FAN()
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	64 97       	sbiw	r28, 0x14	; 20
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_val_1 = ADC_u16Read(ADC1);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	0e 94 05 0c 	call	0x180a	; 0x180a <ADC_u16Read>
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
	u32 Temp = (ADC_val_1 * 4.88) / 10;
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	cc 01       	movw	r24, r24
    2230:	a0 e0       	ldi	r26, 0x00	; 0
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	26 ef       	ldi	r18, 0xF6	; 246
    2246:	38 e2       	ldi	r19, 0x28	; 40
    2248:	4c e9       	ldi	r20, 0x9C	; 156
    224a:	50 e4       	ldi	r21, 0x40	; 64
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8f 87       	std	Y+15, r24	; 0x0f
    2276:	98 8b       	std	Y+16, r25	; 0x10
    2278:	a9 8b       	std	Y+17, r26	; 0x11
    227a:	ba 8b       	std	Y+18, r27	; 0x12

	if(Temp > 26){
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	98 89       	ldd	r25, Y+16	; 0x10
    2280:	a9 89       	ldd	r26, Y+17	; 0x11
    2282:	ba 89       	ldd	r27, Y+18	; 0x12
    2284:	8b 31       	cpi	r24, 0x1B	; 27
    2286:	91 05       	cpc	r25, r1
    2288:	a1 05       	cpc	r26, r1
    228a:	b1 05       	cpc	r27, r1
    228c:	68 f0       	brcs	.+26     	; 0x22a8 <TEMP_FAN+0x9c>
		DIO_voidSetPinValue(DIO_PORTA, PIN2, HIGH);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	62 e0       	ldi	r22, 0x02	; 2
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		LCD_voidGoToXY(15,0);
    2298:	8f e0       	ldi	r24, 0x0F	; 15
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidSendData('M');}
    22a0:	8d e4       	ldi	r24, 0x4D	; 77
    22a2:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <TEMP_FAN+0xb4>

	else{
		DIO_voidSetPinValue(DIO_PORTA, PIN2, LOW);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_voidSetPinValue>
		LCD_voidGoToXY(15,0);
    22b2:	8f e0       	ldi	r24, 0x0F	; 15
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidSendData(' ');}
    22ba:	80 e2       	ldi	r24, 0x20	; 32
    22bc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 ea       	ldi	r26, 0xA0	; 160
    22c6:	b1 e4       	ldi	r27, 0x41	; 65
    22c8:	8b 87       	std	Y+11, r24	; 0x0b
    22ca:	9c 87       	std	Y+12, r25	; 0x0c
    22cc:	ad 87       	std	Y+13, r26	; 0x0d
    22ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	53 e4       	ldi	r21, 0x43	; 67
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8f 83       	std	Y+7, r24	; 0x07
    22ea:	98 87       	std	Y+8, r25	; 0x08
    22ec:	a9 87       	std	Y+9, r26	; 0x09
    22ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2304:	88 23       	and	r24, r24
    2306:	2c f4       	brge	.+10     	; 0x2312 <TEMP_FAN+0x106>
		__ticks = 1;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <TEMP_FAN+0x184>
	else if (__tmp > 65535)
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	3f ef       	ldi	r19, 0xFF	; 255
    231e:	4f e7       	ldi	r20, 0x7F	; 127
    2320:	57 e4       	ldi	r21, 0x47	; 71
    2322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2326:	18 16       	cp	r1, r24
    2328:	4c f5       	brge	.+82     	; 0x237c <TEMP_FAN+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232a:	6b 85       	ldd	r22, Y+11	; 0x0b
    232c:	7c 85       	ldd	r23, Y+12	; 0x0c
    232e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2330:	9e 85       	ldd	r25, Y+14	; 0x0e
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e2       	ldi	r20, 0x20	; 32
    2338:	51 e4       	ldi	r21, 0x41	; 65
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	bc 01       	movw	r22, r24
    2344:	cd 01       	movw	r24, r26
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <TEMP_FAN+0x166>
    2354:	89 e1       	ldi	r24, 0x19	; 25
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <TEMP_FAN+0x154>
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	69 f7       	brne	.-38     	; 0x2354 <TEMP_FAN+0x148>
    237a:	14 c0       	rjmp	.+40     	; 0x23a4 <TEMP_FAN+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	6f 81       	ldd	r22, Y+7	; 0x07
    237e:	78 85       	ldd	r23, Y+8	; 0x08
    2380:	89 85       	ldd	r24, Y+9	; 0x09
    2382:	9a 85       	ldd	r25, Y+10	; 0x0a
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <TEMP_FAN+0x190>
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);
//	LCD_voidSendCommand(0x01);
	LCD_voidGoToXY(0,0);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
	LCD_voidWriteString("TEMP=");
    23ac:	89 e6       	ldi	r24, 0x69	; 105
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
	LCD_voidGoToXY(5,0);
    23b4:	85 e0       	ldi	r24, 0x05	; 5
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
	LCD_voidWriteNumber(Temp);
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	98 89       	ldd	r25, Y+16	; 0x10
    23c0:	a9 89       	ldd	r26, Y+17	; 0x11
    23c2:	ba 89       	ldd	r27, Y+18	; 0x12
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <LCD_voidWriteNumber>
}
    23cc:	64 96       	adiw	r28, 0x14	; 20
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <Servo_Init>:

#include <util/delay.h>


void Servo_Init()
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	2e 97       	sbiw	r28, 0x0e	; 14
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(SERVO_PORT , SERVO_PIN , OUTPUT_PIN);
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	65 e0       	ldi	r22, 0x05	; 5
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <DIO_voidSetPinDirection>
	Timer1_voidInit();
    23fc:	0e 94 75 07 	call	0xeea	; 0xeea <Timer1_voidInit>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e8       	ldi	r26, 0x80	; 128
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	ad 87       	std	Y+13, r26	; 0x0d
    240e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a e7       	ldi	r20, 0x7A	; 122
    241e:	53 e4       	ldi	r21, 0x43	; 67
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
    242c:	a9 87       	std	Y+9, r26	; 0x09
    242e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <Servo_Init+0x74>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <Servo_Init+0xf2>
	else if (__tmp > 65535)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <Servo_Init+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <Servo_Init+0xd4>
    2494:	89 e1       	ldi	r24, 0x19	; 25
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <Servo_Init+0xc2>
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <Servo_Init+0xb6>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <Servo_Init+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <Servo_Init+0xfe>
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    24e4:	2e 96       	adiw	r28, 0x0e	; 14
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <Door_Open>:

void Door_Open()
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	60 97       	sbiw	r28, 0x10	; 16
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
	for(u16 Local_u16Index = 751 ; Local_u16Index <= 2000 ; Local_u16Index++)
    250a:	8f ee       	ldi	r24, 0xEF	; 239
    250c:	92 e0       	ldi	r25, 0x02	; 2
    250e:	98 8b       	std	Y+16, r25	; 0x10
    2510:	8f 87       	std	Y+15, r24	; 0x0f
    2512:	7b c0       	rjmp	.+246    	; 0x260a <Door_Open+0x114>
	{
		Timer1_voidSetCompareMatchValueChannalA(Local_u16Index);
    2514:	8f 85       	ldd	r24, Y+15	; 0x0f
    2516:	98 89       	ldd	r25, Y+16	; 0x10
    2518:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Timer1_voidSetCompareMatchValueChannalA>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e8       	ldi	r26, 0x80	; 128
    2522:	bf e3       	ldi	r27, 0x3F	; 63
    2524:	8b 87       	std	Y+11, r24	; 0x0b
    2526:	9c 87       	std	Y+12, r25	; 0x0c
    2528:	ad 87       	std	Y+13, r26	; 0x0d
    252a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	6b 85       	ldd	r22, Y+11	; 0x0b
    252e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2530:	8d 85       	ldd	r24, Y+13	; 0x0d
    2532:	9e 85       	ldd	r25, Y+14	; 0x0e
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	53 e4       	ldi	r21, 0x43	; 67
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8f 83       	std	Y+7, r24	; 0x07
    2546:	98 87       	std	Y+8, r25	; 0x08
    2548:	a9 87       	std	Y+9, r26	; 0x09
    254a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <Door_Open+0x78>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <Door_Open+0xf6>
	else if (__tmp > 65535)
    256e:	6f 81       	ldd	r22, Y+7	; 0x07
    2570:	78 85       	ldd	r23, Y+8	; 0x08
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <Door_Open+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	7c 85       	ldd	r23, Y+12	; 0x0c
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <Door_Open+0xd8>
    25b0:	89 e1       	ldi	r24, 0x19	; 25
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <Door_Open+0xc6>
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <Door_Open+0xba>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <Door_Open+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <Door_Open+0x102>
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}

void Door_Open()
{
	for(u16 Local_u16Index = 751 ; Local_u16Index <= 2000 ; Local_u16Index++)
    2600:	8f 85       	ldd	r24, Y+15	; 0x0f
    2602:	98 89       	ldd	r25, Y+16	; 0x10
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	98 8b       	std	Y+16, r25	; 0x10
    2608:	8f 87       	std	Y+15, r24	; 0x0f
    260a:	8f 85       	ldd	r24, Y+15	; 0x0f
    260c:	98 89       	ldd	r25, Y+16	; 0x10
    260e:	27 e0       	ldi	r18, 0x07	; 7
    2610:	81 3d       	cpi	r24, 0xD1	; 209
    2612:	92 07       	cpc	r25, r18
    2614:	08 f4       	brcc	.+2      	; 0x2618 <Door_Open+0x122>
    2616:	7e cf       	rjmp	.-260    	; 0x2514 <Door_Open+0x1e>
	{
		Timer1_voidSetCompareMatchValueChannalA(Local_u16Index);
		_delay_ms(1);
	}
}
    2618:	60 96       	adiw	r28, 0x10	; 16
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <Door_Close>:

void Door_Close()
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	60 97       	sbiw	r28, 0x10	; 16
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
	for(u16 Local_u16Index = 2000 ; Local_u16Index >= 750 ; Local_u16Index--)
    263e:	80 ed       	ldi	r24, 0xD0	; 208
    2640:	97 e0       	ldi	r25, 0x07	; 7
    2642:	98 8b       	std	Y+16, r25	; 0x10
    2644:	8f 87       	std	Y+15, r24	; 0x0f
    2646:	7b c0       	rjmp	.+246    	; 0x273e <Door_Close+0x114>
	{
		Timer1_voidSetCompareMatchValueChannalA(Local_u16Index);
    2648:	8f 85       	ldd	r24, Y+15	; 0x0f
    264a:	98 89       	ldd	r25, Y+16	; 0x10
    264c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Timer1_voidSetCompareMatchValueChannalA>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e8       	ldi	r26, 0x80	; 128
    2656:	bf e3       	ldi	r27, 0x3F	; 63
    2658:	8b 87       	std	Y+11, r24	; 0x0b
    265a:	9c 87       	std	Y+12, r25	; 0x0c
    265c:	ad 87       	std	Y+13, r26	; 0x0d
    265e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a e7       	ldi	r20, 0x7A	; 122
    266e:	53 e4       	ldi	r21, 0x43	; 67
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8f 83       	std	Y+7, r24	; 0x07
    267a:	98 87       	std	Y+8, r25	; 0x08
    267c:	a9 87       	std	Y+9, r26	; 0x09
    267e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <Door_Close+0x78>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <Door_Close+0xf6>
	else if (__tmp > 65535)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <Door_Close+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    26bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26be:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <Door_Close+0xd8>
    26e4:	89 e1       	ldi	r24, 0x19	; 25
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <Door_Close+0xc6>
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <Door_Close+0xba>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <Door_Close+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <Door_Close+0x102>
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Door_Close()
{
	for(u16 Local_u16Index = 2000 ; Local_u16Index >= 750 ; Local_u16Index--)
    2734:	8f 85       	ldd	r24, Y+15	; 0x0f
    2736:	98 89       	ldd	r25, Y+16	; 0x10
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	98 8b       	std	Y+16, r25	; 0x10
    273c:	8f 87       	std	Y+15, r24	; 0x0f
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	98 89       	ldd	r25, Y+16	; 0x10
    2742:	22 e0       	ldi	r18, 0x02	; 2
    2744:	8e 3e       	cpi	r24, 0xEE	; 238
    2746:	92 07       	cpc	r25, r18
    2748:	08 f0       	brcs	.+2      	; 0x274c <Door_Close+0x122>
    274a:	7e cf       	rjmp	.-260    	; 0x2648 <Door_Close+0x1e>
	{
		Timer1_voidSetCompareMatchValueChannalA(Local_u16Index);
		_delay_ms(1);
	}
}
    274c:	60 96       	adiw	r28, 0x10	; 16
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <User>:

u8 USERNAME[] = {'1', '2', '3', '4'};
u8 PASSWORD[] = {'1', '2', '3', '4'};

u8 User()
{
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	65 97       	sbiw	r28, 0x15	; 21
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
	u8 USER[4] = {0};
    2776:	19 8a       	std	Y+17, r1	; 0x11
    2778:	1a 8a       	std	Y+18, r1	; 0x12
    277a:	1b 8a       	std	Y+19, r1	; 0x13
    277c:	1c 8a       	std	Y+20, r1	; 0x14

	LCD_voidSendCommand(0x01);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
	LCD_voidWriteString(" Enter USER:");
    2784:	8f e6       	ldi	r24, 0x6F	; 111
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>

	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    278c:	18 8a       	std	Y+16, r1	; 0x10
    278e:	1f c0       	rjmp	.+62     	; 0x27ce <User+0x70>
	{
		USER[LocalCounter_Chars] = UART_u8ReadData();
    2790:	88 89       	ldd	r24, Y+16	; 0x10
    2792:	08 2f       	mov	r16, r24
    2794:	10 e0       	ldi	r17, 0x00	; 0
    2796:	0e 94 66 07 	call	0xecc	; 0xecc <UART_u8ReadData>
    279a:	28 2f       	mov	r18, r24
    279c:	ce 01       	movw	r24, r28
    279e:	41 96       	adiw	r24, 0x11	; 17
    27a0:	fc 01       	movw	r30, r24
    27a2:	e0 0f       	add	r30, r16
    27a4:	f1 1f       	adc	r31, r17
    27a6:	20 83       	st	Z, r18
		LCD_voidGoToXY(LocalCounter_Chars + 1 ,1);
    27a8:	88 89       	ldd	r24, Y+16	; 0x10
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	61 e0       	ldi	r22, 0x01	; 1
    27ae:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidSendData(USER[LocalCounter_Chars]);
    27b2:	88 89       	ldd	r24, Y+16	; 0x10
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	ce 01       	movw	r24, r28
    27ba:	41 96       	adiw	r24, 0x11	; 17
    27bc:	fc 01       	movw	r30, r24
    27be:	e2 0f       	add	r30, r18
    27c0:	f3 1f       	adc	r31, r19
    27c2:	80 81       	ld	r24, Z
    27c4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
	u8 USER[4] = {0};

	LCD_voidSendCommand(0x01);
	LCD_voidWriteString(" Enter USER:");

	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    27c8:	88 89       	ldd	r24, Y+16	; 0x10
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	88 8b       	std	Y+16, r24	; 0x10
    27ce:	88 89       	ldd	r24, Y+16	; 0x10
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	f0 f2       	brcs	.-68     	; 0x2790 <User+0x32>
		LCD_voidGoToXY(LocalCounter_Chars + 1 ,1);
		LCD_voidSendData(USER[LocalCounter_Chars]);
	}

	/*Check the user*/
	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    27d4:	1f 86       	std	Y+15, r1	; 0x0f
    27d6:	92 c0       	rjmp	.+292    	; 0x28fc <User+0x19e>
	{
		if( USER[LocalCounter_Chars] != USERNAME[LocalCounter_Chars] )
    27d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	ce 01       	movw	r24, r28
    27e0:	41 96       	adiw	r24, 0x11	; 17
    27e2:	fc 01       	movw	r30, r24
    27e4:	e2 0f       	add	r30, r18
    27e6:	f3 1f       	adc	r31, r19
    27e8:	20 81       	ld	r18, Z
    27ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	fc 01       	movw	r30, r24
    27f2:	ef 50       	subi	r30, 0x0F	; 15
    27f4:	fe 4f       	sbci	r31, 0xFE	; 254
    27f6:	80 81       	ld	r24, Z
    27f8:	28 17       	cp	r18, r24
    27fa:	09 f4       	brne	.+2      	; 0x27fe <User+0xa0>
    27fc:	7c c0       	rjmp	.+248    	; 0x28f6 <User+0x198>
		{
			LCD_voidSendCommand(0x01);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
			LCD_voidWriteString(" WRONG USER!");
    2804:	8c e7       	ldi	r24, 0x7C	; 124
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	aa ef       	ldi	r26, 0xFA	; 250
    2812:	b4 e4       	ldi	r27, 0x44	; 68
    2814:	8b 87       	std	Y+11, r24	; 0x0b
    2816:	9c 87       	std	Y+12, r25	; 0x0c
    2818:	ad 87       	std	Y+13, r26	; 0x0d
    281a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	6b 85       	ldd	r22, Y+11	; 0x0b
    281e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a e7       	ldi	r20, 0x7A	; 122
    282a:	53 e4       	ldi	r21, 0x43	; 67
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8f 83       	std	Y+7, r24	; 0x07
    2836:	98 87       	std	Y+8, r25	; 0x08
    2838:	a9 87       	std	Y+9, r26	; 0x09
    283a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	2c f4       	brge	.+10     	; 0x285e <User+0x100>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	3f c0       	rjmp	.+126    	; 0x28dc <User+0x17e>
	else if (__tmp > 65535)
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	4c f5       	brge	.+82     	; 0x28c8 <User+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	6b 85       	ldd	r22, Y+11	; 0x0b
    2878:	7c 85       	ldd	r23, Y+12	; 0x0c
    287a:	8d 85       	ldd	r24, Y+13	; 0x0d
    287c:	9e 85       	ldd	r25, Y+14	; 0x0e
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
    289e:	0f c0       	rjmp	.+30     	; 0x28be <User+0x160>
    28a0:	89 e1       	ldi	r24, 0x19	; 25
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	9c 81       	ldd	r25, Y+4	; 0x04
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <User+0x14e>
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	69 f7       	brne	.-38     	; 0x28a0 <User+0x142>
    28c6:	14 c0       	rjmp	.+40     	; 0x28f0 <User+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <User+0x18a>
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			return WRONG_USER;
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	8d 8b       	std	Y+21, r24	; 0x15
    28f4:	09 c0       	rjmp	.+18     	; 0x2908 <User+0x1aa>
		LCD_voidGoToXY(LocalCounter_Chars + 1 ,1);
		LCD_voidSendData(USER[LocalCounter_Chars]);
	}

	/*Check the user*/
	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    28f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f8:	8f 5f       	subi	r24, 0xFF	; 255
    28fa:	8f 87       	std	Y+15, r24	; 0x0f
    28fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fe:	84 30       	cpi	r24, 0x04	; 4
    2900:	08 f4       	brcc	.+2      	; 0x2904 <User+0x1a6>
    2902:	6a cf       	rjmp	.-300    	; 0x27d8 <User+0x7a>
			LCD_voidWriteString(" WRONG USER!");
			_delay_ms(2000);
			return WRONG_USER;
		}
	}
	return CORRECT_USER;
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	8d 8b       	std	Y+21, r24	; 0x15
    2908:	8d 89       	ldd	r24, Y+21	; 0x15
}
    290a:	65 96       	adiw	r28, 0x15	; 21
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	08 95       	ret

00002920 <Password>:

u8 Password()
{
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	a3 97       	sbiw	r28, 0x23	; 35
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
	u8 PASS[4] = {0};
    2938:	1f 8e       	std	Y+31, r1	; 0x1f
    293a:	18 a2       	std	Y+32, r1	; 0x20
    293c:	19 a2       	std	Y+33, r1	; 0x21
    293e:	1a a2       	std	Y+34, r1	; 0x22

	LCD_voidSendCommand(0x01);
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
	LCD_voidWriteString(" Enter Password:");
    2946:	89 e8       	ldi	r24, 0x89	; 137
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>

	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    294e:	1e 8e       	std	Y+30, r1	; 0x1e
    2950:	99 c0       	rjmp	.+306    	; 0x2a84 <Password+0x164>
	{
	 PASS[LocalCounter_Chars] = UART_u8ReadData();
    2952:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2954:	08 2f       	mov	r16, r24
    2956:	10 e0       	ldi	r17, 0x00	; 0
    2958:	0e 94 66 07 	call	0xecc	; 0xecc <UART_u8ReadData>
    295c:	28 2f       	mov	r18, r24
    295e:	ce 01       	movw	r24, r28
    2960:	4f 96       	adiw	r24, 0x1f	; 31
    2962:	fc 01       	movw	r30, r24
    2964:	e0 0f       	add	r30, r16
    2966:	f1 1f       	adc	r31, r17
    2968:	20 83       	st	Z, r18

	 LCD_voidGoToXY(LocalCounter_Chars + 1,1);
    296a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
	 LCD_voidSendData(PASS[LocalCounter_Chars]);
    2974:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	ce 01       	movw	r24, r28
    297c:	4f 96       	adiw	r24, 0x1f	; 31
    297e:	fc 01       	movw	r30, r24
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	80 81       	ld	r24, Z
    2986:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	aa e7       	ldi	r26, 0x7A	; 122
    2990:	b4 e4       	ldi	r27, 0x44	; 68
    2992:	89 8f       	std	Y+25, r24	; 0x19
    2994:	9a 8f       	std	Y+26, r25	; 0x1a
    2996:	ab 8f       	std	Y+27, r26	; 0x1b
    2998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	69 8d       	ldd	r22, Y+25	; 0x19
    299c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    299e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a e7       	ldi	r20, 0x7A	; 122
    29a8:	53 e4       	ldi	r21, 0x43	; 67
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8d 8b       	std	Y+21, r24	; 0x15
    29b4:	9e 8b       	std	Y+22, r25	; 0x16
    29b6:	af 8b       	std	Y+23, r26	; 0x17
    29b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ba:	6d 89       	ldd	r22, Y+21	; 0x15
    29bc:	7e 89       	ldd	r23, Y+22	; 0x16
    29be:	8f 89       	ldd	r24, Y+23	; 0x17
    29c0:	98 8d       	ldd	r25, Y+24	; 0x18
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <Password+0xbc>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9c 8b       	std	Y+20, r25	; 0x14
    29d8:	8b 8b       	std	Y+19, r24	; 0x13
    29da:	3f c0       	rjmp	.+126    	; 0x2a5a <Password+0x13a>
	else if (__tmp > 65535)
    29dc:	6d 89       	ldd	r22, Y+21	; 0x15
    29de:	7e 89       	ldd	r23, Y+22	; 0x16
    29e0:	8f 89       	ldd	r24, Y+23	; 0x17
    29e2:	98 8d       	ldd	r25, Y+24	; 0x18
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	4c f5       	brge	.+82     	; 0x2a46 <Password+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	69 8d       	ldd	r22, Y+25	; 0x19
    29f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <Password+0x11c>
    2a1e:	89 e1       	ldi	r24, 0x19	; 25
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9a 8b       	std	Y+18, r25	; 0x12
    2a24:	89 8b       	std	Y+17, r24	; 0x11
    2a26:	89 89       	ldd	r24, Y+17	; 0x11
    2a28:	9a 89       	ldd	r25, Y+18	; 0x12
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <Password+0x10a>
    2a2e:	9a 8b       	std	Y+18, r25	; 0x12
    2a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	9c 89       	ldd	r25, Y+20	; 0x14
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9c 8b       	std	Y+20, r25	; 0x14
    2a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	69 f7       	brne	.-38     	; 0x2a1e <Password+0xfe>
    2a44:	14 c0       	rjmp	.+40     	; 0x2a6e <Password+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	6d 89       	ldd	r22, Y+21	; 0x15
    2a48:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9c 8b       	std	Y+20, r25	; 0x14
    2a58:	8b 8b       	std	Y+19, r24	; 0x13
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	98 8b       	std	Y+16, r25	; 0x10
    2a60:	8f 87       	std	Y+15, r24	; 0x0f
    2a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a64:	98 89       	ldd	r25, Y+16	; 0x10
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <Password+0x146>
    2a6a:	98 8b       	std	Y+16, r25	; 0x10
    2a6c:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1000);
	 LCD_voidGoToXY(LocalCounter_Chars + 1,1);
    2a6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
	 LCD_voidSendData('*');
    2a78:	8a e2       	ldi	r24, 0x2A	; 42
    2a7a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_voidSendData>
	u8 PASS[4] = {0};

	LCD_voidSendCommand(0x01);
	LCD_voidWriteString(" Enter Password:");

	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    2a7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a80:	8f 5f       	subi	r24, 0xFF	; 255
    2a82:	8e 8f       	std	Y+30, r24	; 0x1e
    2a84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a86:	84 30       	cpi	r24, 0x04	; 4
    2a88:	08 f4       	brcc	.+2      	; 0x2a8c <Password+0x16c>
    2a8a:	63 cf       	rjmp	.-314    	; 0x2952 <Password+0x32>
	 LCD_voidGoToXY(LocalCounter_Chars + 1,1);
	 LCD_voidSendData('*');
	}

	/*Check the Password*/
	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    2a8c:	1d 8e       	std	Y+29, r1	; 0x1d
    2a8e:	92 c0       	rjmp	.+292    	; 0x2bb4 <Password+0x294>
	{
		if( PASS[LocalCounter_Chars] != PASSWORD[LocalCounter_Chars] )
    2a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	ce 01       	movw	r24, r28
    2a98:	4f 96       	adiw	r24, 0x1f	; 31
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e2 0f       	add	r30, r18
    2a9e:	f3 1f       	adc	r31, r19
    2aa0:	20 81       	ld	r18, Z
    2aa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	eb 50       	subi	r30, 0x0B	; 11
    2aac:	fe 4f       	sbci	r31, 0xFE	; 254
    2aae:	80 81       	ld	r24, Z
    2ab0:	28 17       	cp	r18, r24
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <Password+0x196>
    2ab4:	7c c0       	rjmp	.+248    	; 0x2bae <Password+0x28e>
		{
			LCD_voidSendCommand(0x01);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
			LCD_voidWriteString(" WRONG PASSWORD!");
    2abc:	8a e9       	ldi	r24, 0x9A	; 154
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	aa ef       	ldi	r26, 0xFA	; 250
    2aca:	b4 e4       	ldi	r27, 0x44	; 68
    2acc:	8b 87       	std	Y+11, r24	; 0x0b
    2ace:	9c 87       	std	Y+12, r25	; 0x0c
    2ad0:	ad 87       	std	Y+13, r26	; 0x0d
    2ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	53 e4       	ldi	r21, 0x43	; 67
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8f 83       	std	Y+7, r24	; 0x07
    2aee:	98 87       	std	Y+8, r25	; 0x08
    2af0:	a9 87       	std	Y+9, r26	; 0x09
    2af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <Password+0x1f6>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <Password+0x274>
	else if (__tmp > 65535)
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <Password+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <Password+0x256>
    2b58:	89 e1       	ldi	r24, 0x19	; 25
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <Password+0x244>
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <Password+0x238>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <Password+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6f 81       	ldd	r22, Y+7	; 0x07
    2b82:	78 85       	ldd	r23, Y+8	; 0x08
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <Password+0x280>
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			return WRONG_PASSWORD;
    2ba8:	84 e0       	ldi	r24, 0x04	; 4
    2baa:	8b a3       	std	Y+35, r24	; 0x23
    2bac:	09 c0       	rjmp	.+18     	; 0x2bc0 <Password+0x2a0>
	 LCD_voidGoToXY(LocalCounter_Chars + 1,1);
	 LCD_voidSendData('*');
	}

	/*Check the Password*/
	for(u8 LocalCounter_Chars = 0; LocalCounter_Chars < 4; LocalCounter_Chars++)
    2bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bb6:	84 30       	cpi	r24, 0x04	; 4
    2bb8:	08 f4       	brcc	.+2      	; 0x2bbc <Password+0x29c>
    2bba:	6a cf       	rjmp	.-300    	; 0x2a90 <Password+0x170>
			_delay_ms(2000);
			return WRONG_PASSWORD;
		}
	}

	return CORRECT_PASSWORD;
    2bbc:	85 e0       	ldi	r24, 0x05	; 5
    2bbe:	8b a3       	std	Y+35, r24	; 0x23
    2bc0:	8b a1       	ldd	r24, Y+35	; 0x23
}
    2bc2:	a3 96       	adiw	r28, 0x23	; 35
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <main>:
#include "APP/APP.h"

#include <util/delay.h>

void main(void)
{
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	c5 56       	subi	r28, 0x65	; 101
    2be6:	d0 40       	sbci	r29, 0x00	; 0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
	UART_voidConfigDir();
    2bf2:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidConfigDir>
	UART_voidInit();
    2bf6:	0e 94 28 07 	call	0xe50	; 0xe50 <UART_voidInit>

	ADC_voidInit();
    2bfa:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <ADC_voidInit>

	LCD_voidConfigDir();
    2bfe:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_voidConfigDir>
	LCD_voidInit();
    2c02:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_voidInit>

	TEMPFAN_Init();
    2c06:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <TEMPFAN_Init>
	LDR_void_LED_ConfigDir();
    2c0a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LDR_void_LED_ConfigDir>
	Servo_Init();
    2c0e:	0e 94 ef 11 	call	0x23de	; 0x23de <Servo_Init>

	u8 u = 0;
    2c12:	fe 01       	movw	r30, r28
    2c14:	eb 59       	subi	r30, 0x9B	; 155
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	10 82       	st	Z, r1
	u8 P = 0;
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ec 59       	subi	r30, 0x9C	; 156
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	10 82       	st	Z, r1
	u8 Trials = 2;
    2c22:	fe 01       	movw	r30, r28
    2c24:	ed 59       	subi	r30, 0x9D	; 157
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	80 83       	st	Z, r24

	if(UART_u8ReadData() == 'S')
    2c2c:	0e 94 66 07 	call	0xecc	; 0xecc <UART_u8ReadData>
    2c30:	83 35       	cpi	r24, 0x53	; 83
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <main+0x5e>
    2c34:	54 c4       	rjmp	.+2216   	; 0x34de <main+0x906>
{
		LCD_voidWriteString("Welcome To Smart");
    2c36:	8b ea       	ldi	r24, 0xAB	; 171
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
		LCD_voidGoToXY(0,1);
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	0e 94 1e 10 	call	0x203c	; 0x203c <LCD_voidGoToXY>
		LCD_voidWriteString("Home System ^_^ ");
    2c46:	8c eb       	ldi	r24, 0xBC	; 188
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e1 5a       	subi	r30, 0xA1	; 161
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e4       	ldi	r25, 0x40	; 64
    2c58:	ac e9       	ldi	r26, 0x9C	; 156
    2c5a:	b5 e4       	ldi	r27, 0x45	; 69
    2c5c:	80 83       	st	Z, r24
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	a2 83       	std	Z+2, r26	; 0x02
    2c62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c64:	8e 01       	movw	r16, r28
    2c66:	05 5a       	subi	r16, 0xA5	; 165
    2c68:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e1 5a       	subi	r30, 0xA1	; 161
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a e7       	ldi	r20, 0x7A	; 122
    2c7e:	53 e4       	ldi	r21, 0x43	; 67
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	f8 01       	movw	r30, r16
    2c8a:	80 83       	st	Z, r24
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	a2 83       	std	Z+2, r26	; 0x02
    2c90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 5a       	subi	r30, 0xA5	; 165
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	44 f4       	brge	.+16     	; 0x2cc0 <main+0xe8>
		__ticks = 1;
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e7 5a       	subi	r30, 0xA7	; 167
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	64 c0       	rjmp	.+200    	; 0x2d88 <main+0x1b0>
	else if (__tmp > 65535)
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e5 5a       	subi	r30, 0xA5	; 165
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	60 81       	ld	r22, Z
    2cc8:	71 81       	ldd	r23, Z+1	; 0x01
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	93 81       	ldd	r25, Z+3	; 0x03
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	3f ef       	ldi	r19, 0xFF	; 255
    2cd2:	4f e7       	ldi	r20, 0x7F	; 127
    2cd4:	57 e4       	ldi	r21, 0x47	; 71
    2cd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	0c f0       	brlt	.+2      	; 0x2ce0 <main+0x108>
    2cde:	43 c0       	rjmp	.+134    	; 0x2d66 <main+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e1 5a       	subi	r30, 0xA1	; 161
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	8e 01       	movw	r16, r28
    2d00:	07 5a       	subi	r16, 0xA7	; 167
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	f8 01       	movw	r30, r16
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
    2d16:	1f c0       	rjmp	.+62     	; 0x2d56 <main+0x17e>
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e9 5a       	subi	r30, 0xA9	; 169
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	89 e1       	ldi	r24, 0x19	; 25
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	fe 01       	movw	r30, r28
    2d28:	e9 5a       	subi	r30, 0xA9	; 169
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <main+0x158>
    2d34:	fe 01       	movw	r30, r28
    2d36:	e9 5a       	subi	r30, 0xA9	; 169
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3e:	de 01       	movw	r26, r28
    2d40:	a7 5a       	subi	r26, 0xA7	; 167
    2d42:	bf 4f       	sbci	r27, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	e7 5a       	subi	r30, 0xA7	; 167
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	11 96       	adiw	r26, 0x01	; 1
    2d52:	9c 93       	st	X, r25
    2d54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d56:	fe 01       	movw	r30, r28
    2d58:	e7 5a       	subi	r30, 0xA7	; 167
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	d1 f6       	brne	.-76     	; 0x2d18 <main+0x140>
    2d64:	27 c0       	rjmp	.+78     	; 0x2db4 <main+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	8e 01       	movw	r16, r28
    2d68:	07 5a       	subi	r16, 0xA7	; 167
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e5 5a       	subi	r30, 0xA5	; 165
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	f8 01       	movw	r30, r16
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
    2d88:	de 01       	movw	r26, r28
    2d8a:	ab 5a       	subi	r26, 0xAB	; 171
    2d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e7 5a       	subi	r30, 0xA7	; 167
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	8d 93       	st	X+, r24
    2d9a:	9c 93       	st	X, r25
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	eb 5a       	subi	r30, 0xAB	; 171
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <main+0x1ce>
    2daa:	fe 01       	movw	r30, r28
    2dac:	eb 5a       	subi	r30, 0xAB	; 171
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
		_delay_ms(5000);
		LCD_voidSendCommand(0x01);
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
		UART_voidWriteData(Trials + 1 + '0');
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ed 59       	subi	r30, 0x9D	; 157
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8f 5c       	subi	r24, 0xCF	; 207
    2dc4:	0e 94 4c 07 	call	0xe98	; 0xe98 <UART_voidWriteData>
		u = User();
    2dc8:	0e 94 af 13 	call	0x275e	; 0x275e <User>
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 59       	subi	r30, 0x9B	; 155
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 83       	st	Z, r24
    2dd4:	9d c1       	rjmp	.+826    	; 0x3110 <main+0x538>

while(P != CORRECT_PASSWORD)
{
		if (u == WRONG_USER)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	eb 59       	subi	r30, 0x9B	; 155
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	82 30       	cpi	r24, 0x02	; 2
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <main+0x20c>
    2de2:	dc c0       	rjmp	.+440    	; 0x2f9c <main+0x3c4>
		{
			if(Trials == 0)
    2de4:	fe 01       	movw	r30, r28
    2de6:	ed 59       	subi	r30, 0x9D	; 157
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	88 23       	and	r24, r24
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <main+0x21a>
    2df0:	be c0       	rjmp	.+380    	; 0x2f6e <main+0x396>
			{
				LCD_voidSendCommand(0x01);
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
				LCD_voidWriteString(" SYSTEM LOCKED");
    2df8:	8d ec       	ldi	r24, 0xCD	; 205
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
				Door_Close();
    2e00:	0e 94 15 13 	call	0x262a	; 0x262a <Door_Close>
    2e04:	fe 01       	movw	r30, r28
    2e06:	ef 5a       	subi	r30, 0xAF	; 175
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e8       	ldi	r25, 0x80	; 128
    2e0e:	ab e3       	ldi	r26, 0x3B	; 59
    2e10:	b5 e4       	ldi	r27, 0x45	; 69
    2e12:	80 83       	st	Z, r24
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	a2 83       	std	Z+2, r26	; 0x02
    2e18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1a:	8e 01       	movw	r16, r28
    2e1c:	03 5b       	subi	r16, 0xB3	; 179
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	fe 01       	movw	r30, r28
    2e22:	ef 5a       	subi	r30, 0xAF	; 175
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	4a e7       	ldi	r20, 0x7A	; 122
    2e34:	53 e4       	ldi	r21, 0x43	; 67
    2e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	f8 01       	movw	r30, r16
    2e40:	80 83       	st	Z, r24
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	a2 83       	std	Z+2, r26	; 0x02
    2e46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e3 5b       	subi	r30, 0xB3	; 179
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e8       	ldi	r20, 0x80	; 128
    2e5c:	5f e3       	ldi	r21, 0x3F	; 63
    2e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e62:	88 23       	and	r24, r24
    2e64:	44 f4       	brge	.+16     	; 0x2e76 <main+0x29e>
		__ticks = 1;
    2e66:	fe 01       	movw	r30, r28
    2e68:	e5 5b       	subi	r30, 0xB5	; 181
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	64 c0       	rjmp	.+200    	; 0x2f3e <main+0x366>
	else if (__tmp > 65535)
    2e76:	fe 01       	movw	r30, r28
    2e78:	e3 5b       	subi	r30, 0xB3	; 179
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	60 81       	ld	r22, Z
    2e7e:	71 81       	ldd	r23, Z+1	; 0x01
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	93 81       	ldd	r25, Z+3	; 0x03
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3f ef       	ldi	r19, 0xFF	; 255
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	57 e4       	ldi	r21, 0x47	; 71
    2e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	0c f0       	brlt	.+2      	; 0x2e96 <main+0x2be>
    2e94:	43 c0       	rjmp	.+134    	; 0x2f1c <main+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	fe 01       	movw	r30, r28
    2e98:	ef 5a       	subi	r30, 0xAF	; 175
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	60 81       	ld	r22, Z
    2e9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ea0:	82 81       	ldd	r24, Z+2	; 0x02
    2ea2:	93 81       	ldd	r25, Z+3	; 0x03
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e2       	ldi	r20, 0x20	; 32
    2eaa:	51 e4       	ldi	r21, 0x41	; 65
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	8e 01       	movw	r16, r28
    2eb6:	05 5b       	subi	r16, 0xB5	; 181
    2eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	1f c0       	rjmp	.+62     	; 0x2f0c <main+0x334>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e7 5b       	subi	r30, 0xB7	; 183
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	89 e1       	ldi	r24, 0x19	; 25
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	91 83       	std	Z+1, r25	; 0x01
    2eda:	80 83       	st	Z, r24
    2edc:	fe 01       	movw	r30, r28
    2ede:	e7 5b       	subi	r30, 0xB7	; 183
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <main+0x30e>
    2eea:	fe 01       	movw	r30, r28
    2eec:	e7 5b       	subi	r30, 0xB7	; 183
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	de 01       	movw	r26, r28
    2ef6:	a5 5b       	subi	r26, 0xB5	; 181
    2ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    2efa:	fe 01       	movw	r30, r28
    2efc:	e5 5b       	subi	r30, 0xB5	; 181
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	11 96       	adiw	r26, 0x01	; 1
    2f08:	9c 93       	st	X, r25
    2f0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e5 5b       	subi	r30, 0xB5	; 181
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	d1 f6       	brne	.-76     	; 0x2ece <main+0x2f6>
    2f1a:	01 c1       	rjmp	.+514    	; 0x311e <main+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1c:	8e 01       	movw	r16, r28
    2f1e:	05 5b       	subi	r16, 0xB5	; 181
    2f20:	1f 4f       	sbci	r17, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	e3 5b       	subi	r30, 0xB3	; 179
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	82 81       	ldd	r24, Z+2	; 0x02
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	f8 01       	movw	r30, r16
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    2f3e:	de 01       	movw	r26, r28
    2f40:	a9 5b       	subi	r26, 0xB9	; 185
    2f42:	bf 4f       	sbci	r27, 0xFF	; 255
    2f44:	fe 01       	movw	r30, r28
    2f46:	e5 5b       	subi	r30, 0xB5	; 181
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	11 96       	adiw	r26, 0x01	; 1
    2f50:	9c 93       	st	X, r25
    2f52:	8e 93       	st	-X, r24
    2f54:	fe 01       	movw	r30, r28
    2f56:	e9 5b       	subi	r30, 0xB9	; 185
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 81       	ld	r24, Z
    2f5c:	91 81       	ldd	r25, Z+1	; 0x01
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <main+0x386>
    2f62:	fe 01       	movw	r30, r28
    2f64:	e9 5b       	subi	r30, 0xB9	; 185
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	91 83       	std	Z+1, r25	; 0x01
    2f6a:	80 83       	st	Z, r24
    2f6c:	d8 c0       	rjmp	.+432    	; 0x311e <main+0x546>
				break;
			}

			else
			{
				Trials = Trials - 1;
    2f6e:	de 01       	movw	r26, r28
    2f70:	ad 59       	subi	r26, 0x9D	; 157
    2f72:	bf 4f       	sbci	r27, 0xFF	; 255
    2f74:	fe 01       	movw	r30, r28
    2f76:	ed 59       	subi	r30, 0x9D	; 157
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	81 50       	subi	r24, 0x01	; 1
    2f7e:	8c 93       	st	X, r24
				UART_voidWriteData( Trials + 1 + '0');
    2f80:	fe 01       	movw	r30, r28
    2f82:	ed 59       	subi	r30, 0x9D	; 157
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	8f 5c       	subi	r24, 0xCF	; 207
    2f8a:	0e 94 4c 07 	call	0xe98	; 0xe98 <UART_voidWriteData>
				u = User();
    2f8e:	0e 94 af 13 	call	0x275e	; 0x275e <User>
    2f92:	fe 01       	movw	r30, r28
    2f94:	eb 59       	subi	r30, 0x9B	; 155
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 83       	st	Z, r24
    2f9a:	ba c0       	rjmp	.+372    	; 0x3110 <main+0x538>
			}
		}

		else if (u == CORRECT_USER)
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	eb 59       	subi	r30, 0x9B	; 155
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	83 30       	cpi	r24, 0x03	; 3
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <main+0x3d2>
    2fa8:	b3 c0       	rjmp	.+358    	; 0x3110 <main+0x538>
		{
			P = Password();
    2faa:	0e 94 90 14 	call	0x2920	; 0x2920 <Password>
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ec 59       	subi	r30, 0x9C	; 156
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	80 83       	st	Z, r24

			if (P == WRONG_PASSWORD)
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ec 59       	subi	r30, 0x9C	; 156
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	84 30       	cpi	r24, 0x04	; 4
    2fc0:	09 f0       	breq	.+2      	; 0x2fc4 <main+0x3ec>
    2fc2:	a6 c0       	rjmp	.+332    	; 0x3110 <main+0x538>
			{
				if(Trials == 0)
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ed 59       	subi	r30, 0x9D	; 157
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <main+0x3fa>
    2fd0:	8f c0       	rjmp	.+286    	; 0x30f0 <main+0x518>
				{
					LCD_voidSendCommand(0x01);
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
					LCD_voidWriteString(" SYSTEM LOCKED");
    2fd8:	8d ec       	ldi	r24, 0xCD	; 205
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
					Door_Close();
    2fe0:	0e 94 15 13 	call	0x262a	; 0x262a <Door_Close>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ed 5b       	subi	r30, 0xBD	; 189
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e8       	ldi	r25, 0x80	; 128
    2fee:	ab e3       	ldi	r26, 0x3B	; 59
    2ff0:	b5 e4       	ldi	r27, 0x45	; 69
    2ff2:	80 83       	st	Z, r24
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	a2 83       	std	Z+2, r26	; 0x02
    2ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	01 5c       	subi	r16, 0xC1	; 193
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	ed 5b       	subi	r30, 0xBD	; 189
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a e7       	ldi	r20, 0x7A	; 122
    3014:	53 e4       	ldi	r21, 0x43	; 67
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	a2 83       	std	Z+2, r26	; 0x02
    3026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3028:	fe 01       	movw	r30, r28
    302a:	ff 96       	adiw	r30, 0x3f	; 63
    302c:	60 81       	ld	r22, Z
    302e:	71 81       	ldd	r23, Z+1	; 0x01
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	93 81       	ldd	r25, Z+3	; 0x03
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <main+0x476>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9e af       	std	Y+62, r25	; 0x3e
    304a:	8d af       	std	Y+61, r24	; 0x3d
    304c:	46 c0       	rjmp	.+140    	; 0x30da <main+0x502>
	else if (__tmp > 65535)
    304e:	fe 01       	movw	r30, r28
    3050:	ff 96       	adiw	r30, 0x3f	; 63
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	93 81       	ldd	r25, Z+3	; 0x03
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	64 f5       	brge	.+88     	; 0x30c2 <main+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	fe 01       	movw	r30, r28
    306c:	ed 5b       	subi	r30, 0xBD	; 189
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	9e af       	std	Y+62, r25	; 0x3e
    3096:	8d af       	std	Y+61, r24	; 0x3d
    3098:	0f c0       	rjmp	.+30     	; 0x30b8 <main+0x4e0>
    309a:	89 e1       	ldi	r24, 0x19	; 25
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9c af       	std	Y+60, r25	; 0x3c
    30a0:	8b af       	std	Y+59, r24	; 0x3b
    30a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    30a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <main+0x4ce>
    30aa:	9c af       	std	Y+60, r25	; 0x3c
    30ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    30b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	9e af       	std	Y+62, r25	; 0x3e
    30b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    30ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	69 f7       	brne	.-38     	; 0x309a <main+0x4c2>
    30c0:	2e c0       	rjmp	.+92     	; 0x311e <main+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	fe 01       	movw	r30, r28
    30c4:	ff 96       	adiw	r30, 0x3f	; 63
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9e af       	std	Y+62, r25	; 0x3e
    30d8:	8d af       	std	Y+61, r24	; 0x3d
    30da:	8d ad       	ldd	r24, Y+61	; 0x3d
    30dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    30de:	9a af       	std	Y+58, r25	; 0x3a
    30e0:	89 af       	std	Y+57, r24	; 0x39
    30e2:	89 ad       	ldd	r24, Y+57	; 0x39
    30e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <main+0x50e>
    30ea:	9a af       	std	Y+58, r25	; 0x3a
    30ec:	89 af       	std	Y+57, r24	; 0x39
    30ee:	17 c0       	rjmp	.+46     	; 0x311e <main+0x546>
					break;
				}

				else
				{
					Trials = Trials - 1;
    30f0:	de 01       	movw	r26, r28
    30f2:	ad 59       	subi	r26, 0x9D	; 157
    30f4:	bf 4f       	sbci	r27, 0xFF	; 255
    30f6:	fe 01       	movw	r30, r28
    30f8:	ed 59       	subi	r30, 0x9D	; 157
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	81 50       	subi	r24, 0x01	; 1
    3100:	8c 93       	st	X, r24
					UART_voidWriteData( Trials + '0');
    3102:	fe 01       	movw	r30, r28
    3104:	ed 59       	subi	r30, 0x9D	; 157
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	80 5d       	subi	r24, 0xD0	; 208
    310c:	0e 94 4c 07 	call	0xe98	; 0xe98 <UART_voidWriteData>
		_delay_ms(5000);
		LCD_voidSendCommand(0x01);
		UART_voidWriteData(Trials + 1 + '0');
		u = User();

while(P != CORRECT_PASSWORD)
    3110:	fe 01       	movw	r30, r28
    3112:	ec 59       	subi	r30, 0x9C	; 156
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	85 30       	cpi	r24, 0x05	; 5
    311a:	09 f0       	breq	.+2      	; 0x311e <main+0x546>
    311c:	5c ce       	rjmp	.-840    	; 0x2dd6 <main+0x1fe>
				}
			}
		}
}

if(Trials > 0)
    311e:	fe 01       	movw	r30, r28
    3120:	ed 59       	subi	r30, 0x9D	; 157
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	88 23       	and	r24, r24
    3128:	09 f4       	brne	.+2      	; 0x312c <main+0x554>
    312a:	d9 c1       	rjmp	.+946    	; 0x34de <main+0x906>
	{
		LCD_voidSendCommand(0x01);
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
		LCD_voidWriteString(" DOOR OPENED");
    3132:	8c ed       	ldi	r24, 0xDC	; 220
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidWriteString>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e8       	ldi	r25, 0x80	; 128
    313e:	ab e3       	ldi	r26, 0x3B	; 59
    3140:	b5 e4       	ldi	r27, 0x45	; 69
    3142:	8d ab       	std	Y+53, r24	; 0x35
    3144:	9e ab       	std	Y+54, r25	; 0x36
    3146:	af ab       	std	Y+55, r26	; 0x37
    3148:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	6d a9       	ldd	r22, Y+53	; 0x35
    314c:	7e a9       	ldd	r23, Y+54	; 0x36
    314e:	8f a9       	ldd	r24, Y+55	; 0x37
    3150:	98 ad       	ldd	r25, Y+56	; 0x38
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	53 e4       	ldi	r21, 0x43	; 67
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	89 ab       	std	Y+49, r24	; 0x31
    3164:	9a ab       	std	Y+50, r25	; 0x32
    3166:	ab ab       	std	Y+51, r26	; 0x33
    3168:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    316a:	69 a9       	ldd	r22, Y+49	; 0x31
    316c:	7a a9       	ldd	r23, Y+50	; 0x32
    316e:	8b a9       	ldd	r24, Y+51	; 0x33
    3170:	9c a9       	ldd	r25, Y+52	; 0x34
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <main+0x5b4>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	98 ab       	std	Y+48, r25	; 0x30
    3188:	8f a7       	std	Y+47, r24	; 0x2f
    318a:	3f c0       	rjmp	.+126    	; 0x320a <main+0x632>
	else if (__tmp > 65535)
    318c:	69 a9       	ldd	r22, Y+49	; 0x31
    318e:	7a a9       	ldd	r23, Y+50	; 0x32
    3190:	8b a9       	ldd	r24, Y+51	; 0x33
    3192:	9c a9       	ldd	r25, Y+52	; 0x34
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	4c f5       	brge	.+82     	; 0x31f6 <main+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	6d a9       	ldd	r22, Y+53	; 0x35
    31a6:	7e a9       	ldd	r23, Y+54	; 0x36
    31a8:	8f a9       	ldd	r24, Y+55	; 0x37
    31aa:	98 ad       	ldd	r25, Y+56	; 0x38
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	98 ab       	std	Y+48, r25	; 0x30
    31ca:	8f a7       	std	Y+47, r24	; 0x2f
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <main+0x614>
    31ce:	89 e1       	ldi	r24, 0x19	; 25
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	9e a7       	std	Y+46, r25	; 0x2e
    31d4:	8d a7       	std	Y+45, r24	; 0x2d
    31d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    31d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <main+0x602>
    31de:	9e a7       	std	Y+46, r25	; 0x2e
    31e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e4:	98 a9       	ldd	r25, Y+48	; 0x30
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	98 ab       	std	Y+48, r25	; 0x30
    31ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ee:	98 a9       	ldd	r25, Y+48	; 0x30
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <main+0x5f6>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	69 a9       	ldd	r22, Y+49	; 0x31
    31f8:	7a a9       	ldd	r23, Y+50	; 0x32
    31fa:	8b a9       	ldd	r24, Y+51	; 0x33
    31fc:	9c a9       	ldd	r25, Y+52	; 0x34
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	98 ab       	std	Y+48, r25	; 0x30
    3208:	8f a7       	std	Y+47, r24	; 0x2f
    320a:	8f a5       	ldd	r24, Y+47	; 0x2f
    320c:	98 a9       	ldd	r25, Y+48	; 0x30
    320e:	9c a7       	std	Y+44, r25	; 0x2c
    3210:	8b a7       	std	Y+43, r24	; 0x2b
    3212:	8b a5       	ldd	r24, Y+43	; 0x2b
    3214:	9c a5       	ldd	r25, Y+44	; 0x2c
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <main+0x63e>
    321a:	9c a7       	std	Y+44, r25	; 0x2c
    321c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(3000);
		LCD_voidSendCommand(0x01);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_voidSendCommand>
		Door_Open();
    3224:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Door_Open>
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	aa e7       	ldi	r26, 0x7A	; 122
    322e:	b4 e4       	ldi	r27, 0x44	; 68
    3230:	8f a3       	std	Y+39, r24	; 0x27
    3232:	98 a7       	std	Y+40, r25	; 0x28
    3234:	a9 a7       	std	Y+41, r26	; 0x29
    3236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3238:	6f a1       	ldd	r22, Y+39	; 0x27
    323a:	78 a5       	ldd	r23, Y+40	; 0x28
    323c:	89 a5       	ldd	r24, Y+41	; 0x29
    323e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	4a e7       	ldi	r20, 0x7A	; 122
    3246:	53 e4       	ldi	r21, 0x43	; 67
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	8b a3       	std	Y+35, r24	; 0x23
    3252:	9c a3       	std	Y+36, r25	; 0x24
    3254:	ad a3       	std	Y+37, r26	; 0x25
    3256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3258:	6b a1       	ldd	r22, Y+35	; 0x23
    325a:	7c a1       	ldd	r23, Y+36	; 0x24
    325c:	8d a1       	ldd	r24, Y+37	; 0x25
    325e:	9e a1       	ldd	r25, Y+38	; 0x26
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326c:	88 23       	and	r24, r24
    326e:	2c f4       	brge	.+10     	; 0x327a <main+0x6a2>
		__ticks = 1;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9a a3       	std	Y+34, r25	; 0x22
    3276:	89 a3       	std	Y+33, r24	; 0x21
    3278:	3f c0       	rjmp	.+126    	; 0x32f8 <main+0x720>
	else if (__tmp > 65535)
    327a:	6b a1       	ldd	r22, Y+35	; 0x23
    327c:	7c a1       	ldd	r23, Y+36	; 0x24
    327e:	8d a1       	ldd	r24, Y+37	; 0x25
    3280:	9e a1       	ldd	r25, Y+38	; 0x26
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	3f ef       	ldi	r19, 0xFF	; 255
    3286:	4f e7       	ldi	r20, 0x7F	; 127
    3288:	57 e4       	ldi	r21, 0x47	; 71
    328a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328e:	18 16       	cp	r1, r24
    3290:	4c f5       	brge	.+82     	; 0x32e4 <main+0x70c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3292:	6f a1       	ldd	r22, Y+39	; 0x27
    3294:	78 a5       	ldd	r23, Y+40	; 0x28
    3296:	89 a5       	ldd	r24, Y+41	; 0x29
    3298:	9a a5       	ldd	r25, Y+42	; 0x2a
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e2       	ldi	r20, 0x20	; 32
    32a0:	51 e4       	ldi	r21, 0x41	; 65
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9a a3       	std	Y+34, r25	; 0x22
    32b8:	89 a3       	std	Y+33, r24	; 0x21
    32ba:	0f c0       	rjmp	.+30     	; 0x32da <main+0x702>
    32bc:	89 e1       	ldi	r24, 0x19	; 25
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	98 a3       	std	Y+32, r25	; 0x20
    32c2:	8f 8f       	std	Y+31, r24	; 0x1f
    32c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c6:	98 a1       	ldd	r25, Y+32	; 0x20
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <main+0x6f0>
    32cc:	98 a3       	std	Y+32, r25	; 0x20
    32ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d0:	89 a1       	ldd	r24, Y+33	; 0x21
    32d2:	9a a1       	ldd	r25, Y+34	; 0x22
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	9a a3       	std	Y+34, r25	; 0x22
    32d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32da:	89 a1       	ldd	r24, Y+33	; 0x21
    32dc:	9a a1       	ldd	r25, Y+34	; 0x22
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	69 f7       	brne	.-38     	; 0x32bc <main+0x6e4>
    32e2:	14 c0       	rjmp	.+40     	; 0x330c <main+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e4:	6b a1       	ldd	r22, Y+35	; 0x23
    32e6:	7c a1       	ldd	r23, Y+36	; 0x24
    32e8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ea:	9e a1       	ldd	r25, Y+38	; 0x26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9a a3       	std	Y+34, r25	; 0x22
    32f6:	89 a3       	std	Y+33, r24	; 0x21
    32f8:	89 a1       	ldd	r24, Y+33	; 0x21
    32fa:	9a a1       	ldd	r25, Y+34	; 0x22
    32fc:	9e 8f       	std	Y+30, r25	; 0x1e
    32fe:	8d 8f       	std	Y+29, r24	; 0x1d
    3300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <main+0x72c>
    3308:	9e 8f       	std	Y+30, r25	; 0x1e
    330a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);

		while(1)
		{
			LDR_void_LED_CTRL();
    330c:	0e 94 81 0c 	call	0x1902	; 0x1902 <LDR_void_LED_CTRL>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	aa e7       	ldi	r26, 0x7A	; 122
    3316:	b4 e4       	ldi	r27, 0x44	; 68
    3318:	89 8f       	std	Y+25, r24	; 0x19
    331a:	9a 8f       	std	Y+26, r25	; 0x1a
    331c:	ab 8f       	std	Y+27, r26	; 0x1b
    331e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3320:	69 8d       	ldd	r22, Y+25	; 0x19
    3322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	4a e7       	ldi	r20, 0x7A	; 122
    332e:	53 e4       	ldi	r21, 0x43	; 67
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	8d 8b       	std	Y+21, r24	; 0x15
    333a:	9e 8b       	std	Y+22, r25	; 0x16
    333c:	af 8b       	std	Y+23, r26	; 0x17
    333e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3340:	6d 89       	ldd	r22, Y+21	; 0x15
    3342:	7e 89       	ldd	r23, Y+22	; 0x16
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e8       	ldi	r20, 0x80	; 128
    334e:	5f e3       	ldi	r21, 0x3F	; 63
    3350:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3354:	88 23       	and	r24, r24
    3356:	2c f4       	brge	.+10     	; 0x3362 <main+0x78a>
		__ticks = 1;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	9c 8b       	std	Y+20, r25	; 0x14
    335e:	8b 8b       	std	Y+19, r24	; 0x13
    3360:	3f c0       	rjmp	.+126    	; 0x33e0 <main+0x808>
	else if (__tmp > 65535)
    3362:	6d 89       	ldd	r22, Y+21	; 0x15
    3364:	7e 89       	ldd	r23, Y+22	; 0x16
    3366:	8f 89       	ldd	r24, Y+23	; 0x17
    3368:	98 8d       	ldd	r25, Y+24	; 0x18
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	3f ef       	ldi	r19, 0xFF	; 255
    336e:	4f e7       	ldi	r20, 0x7F	; 127
    3370:	57 e4       	ldi	r21, 0x47	; 71
    3372:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3376:	18 16       	cp	r1, r24
    3378:	4c f5       	brge	.+82     	; 0x33cc <main+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337a:	69 8d       	ldd	r22, Y+25	; 0x19
    337c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    337e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3380:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e2       	ldi	r20, 0x20	; 32
    3388:	51 e4       	ldi	r21, 0x41	; 65
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	bc 01       	movw	r22, r24
    3394:	cd 01       	movw	r24, r26
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
    33a2:	0f c0       	rjmp	.+30     	; 0x33c2 <main+0x7ea>
    33a4:	89 e1       	ldi	r24, 0x19	; 25
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	9a 8b       	std	Y+18, r25	; 0x12
    33aa:	89 8b       	std	Y+17, r24	; 0x11
    33ac:	89 89       	ldd	r24, Y+17	; 0x11
    33ae:	9a 89       	ldd	r25, Y+18	; 0x12
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <main+0x7d8>
    33b4:	9a 8b       	std	Y+18, r25	; 0x12
    33b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ba:	9c 89       	ldd	r25, Y+20	; 0x14
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	9c 8b       	std	Y+20, r25	; 0x14
    33c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c2:	8b 89       	ldd	r24, Y+19	; 0x13
    33c4:	9c 89       	ldd	r25, Y+20	; 0x14
    33c6:	00 97       	sbiw	r24, 0x00	; 0
    33c8:	69 f7       	brne	.-38     	; 0x33a4 <main+0x7cc>
    33ca:	14 c0       	rjmp	.+40     	; 0x33f4 <main+0x81c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33cc:	6d 89       	ldd	r22, Y+21	; 0x15
    33ce:	7e 89       	ldd	r23, Y+22	; 0x16
    33d0:	8f 89       	ldd	r24, Y+23	; 0x17
    33d2:	98 8d       	ldd	r25, Y+24	; 0x18
    33d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9c 8b       	std	Y+20, r25	; 0x14
    33de:	8b 8b       	std	Y+19, r24	; 0x13
    33e0:	8b 89       	ldd	r24, Y+19	; 0x13
    33e2:	9c 89       	ldd	r25, Y+20	; 0x14
    33e4:	98 8b       	std	Y+16, r25	; 0x10
    33e6:	8f 87       	std	Y+15, r24	; 0x0f
    33e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ea:	98 89       	ldd	r25, Y+16	; 0x10
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <main+0x814>
    33f0:	98 8b       	std	Y+16, r25	; 0x10
    33f2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			TEMP_FAN();
    33f4:	0e 94 06 11 	call	0x220c	; 0x220c <TEMP_FAN>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	aa e7       	ldi	r26, 0x7A	; 122
    33fe:	b4 e4       	ldi	r27, 0x44	; 68
    3400:	8b 87       	std	Y+11, r24	; 0x0b
    3402:	9c 87       	std	Y+12, r25	; 0x0c
    3404:	ad 87       	std	Y+13, r26	; 0x0d
    3406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	6b 85       	ldd	r22, Y+11	; 0x0b
    340a:	7c 85       	ldd	r23, Y+12	; 0x0c
    340c:	8d 85       	ldd	r24, Y+13	; 0x0d
    340e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	4a e7       	ldi	r20, 0x7A	; 122
    3416:	53 e4       	ldi	r21, 0x43	; 67
    3418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	8f 83       	std	Y+7, r24	; 0x07
    3422:	98 87       	std	Y+8, r25	; 0x08
    3424:	a9 87       	std	Y+9, r26	; 0x09
    3426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e8       	ldi	r20, 0x80	; 128
    3436:	5f e3       	ldi	r21, 0x3F	; 63
    3438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <main+0x872>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9e 83       	std	Y+6, r25	; 0x06
    3446:	8d 83       	std	Y+5, r24	; 0x05
    3448:	3f c0       	rjmp	.+126    	; 0x34c8 <main+0x8f0>
	else if (__tmp > 65535)
    344a:	6f 81       	ldd	r22, Y+7	; 0x07
    344c:	78 85       	ldd	r23, Y+8	; 0x08
    344e:	89 85       	ldd	r24, Y+9	; 0x09
    3450:	9a 85       	ldd	r25, Y+10	; 0x0a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	3f ef       	ldi	r19, 0xFF	; 255
    3456:	4f e7       	ldi	r20, 0x7F	; 127
    3458:	57 e4       	ldi	r21, 0x47	; 71
    345a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    345e:	18 16       	cp	r1, r24
    3460:	4c f5       	brge	.+82     	; 0x34b4 <main+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	6b 85       	ldd	r22, Y+11	; 0x0b
    3464:	7c 85       	ldd	r23, Y+12	; 0x0c
    3466:	8d 85       	ldd	r24, Y+13	; 0x0d
    3468:	9e 85       	ldd	r25, Y+14	; 0x0e
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e2       	ldi	r20, 0x20	; 32
    3470:	51 e4       	ldi	r21, 0x41	; 65
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9e 83       	std	Y+6, r25	; 0x06
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	0f c0       	rjmp	.+30     	; 0x34aa <main+0x8d2>
    348c:	89 e1       	ldi	r24, 0x19	; 25
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	9c 83       	std	Y+4, r25	; 0x04
    3492:	8b 83       	std	Y+3, r24	; 0x03
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <main+0x8c0>
    349c:	9c 83       	std	Y+4, r25	; 0x04
    349e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	9e 81       	ldd	r25, Y+6	; 0x06
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34aa:	8d 81       	ldd	r24, Y+5	; 0x05
    34ac:	9e 81       	ldd	r25, Y+6	; 0x06
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	69 f7       	brne	.-38     	; 0x348c <main+0x8b4>
    34b2:	2c cf       	rjmp	.-424    	; 0x330c <main+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9e 83       	std	Y+6, r25	; 0x06
    34c6:	8d 83       	std	Y+5, r24	; 0x05
    34c8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ca:	9e 81       	ldd	r25, Y+6	; 0x06
    34cc:	9a 83       	std	Y+2, r25	; 0x02
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	9a 81       	ldd	r25, Y+2	; 0x02
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <main+0x8fc>
    34d8:	9a 83       	std	Y+2, r25	; 0x02
    34da:	89 83       	std	Y+1, r24	; 0x01
    34dc:	17 cf       	rjmp	.-466    	; 0x330c <main+0x734>
			_delay_ms(1000);
		}
	}
}
}
    34de:	cb 59       	subi	r28, 0x9B	; 155
    34e0:	df 4f       	sbci	r29, 0xFF	; 255
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret

000034f6 <__udivmodsi4>:
    34f6:	a1 e2       	ldi	r26, 0x21	; 33
    34f8:	1a 2e       	mov	r1, r26
    34fa:	aa 1b       	sub	r26, r26
    34fc:	bb 1b       	sub	r27, r27
    34fe:	fd 01       	movw	r30, r26
    3500:	0d c0       	rjmp	.+26     	; 0x351c <__udivmodsi4_ep>

00003502 <__udivmodsi4_loop>:
    3502:	aa 1f       	adc	r26, r26
    3504:	bb 1f       	adc	r27, r27
    3506:	ee 1f       	adc	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	a2 17       	cp	r26, r18
    350c:	b3 07       	cpc	r27, r19
    350e:	e4 07       	cpc	r30, r20
    3510:	f5 07       	cpc	r31, r21
    3512:	20 f0       	brcs	.+8      	; 0x351c <__udivmodsi4_ep>
    3514:	a2 1b       	sub	r26, r18
    3516:	b3 0b       	sbc	r27, r19
    3518:	e4 0b       	sbc	r30, r20
    351a:	f5 0b       	sbc	r31, r21

0000351c <__udivmodsi4_ep>:
    351c:	66 1f       	adc	r22, r22
    351e:	77 1f       	adc	r23, r23
    3520:	88 1f       	adc	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	1a 94       	dec	r1
    3526:	69 f7       	brne	.-38     	; 0x3502 <__udivmodsi4_loop>
    3528:	60 95       	com	r22
    352a:	70 95       	com	r23
    352c:	80 95       	com	r24
    352e:	90 95       	com	r25
    3530:	9b 01       	movw	r18, r22
    3532:	ac 01       	movw	r20, r24
    3534:	bd 01       	movw	r22, r26
    3536:	cf 01       	movw	r24, r30
    3538:	08 95       	ret

0000353a <__prologue_saves__>:
    353a:	2f 92       	push	r2
    353c:	3f 92       	push	r3
    353e:	4f 92       	push	r4
    3540:	5f 92       	push	r5
    3542:	6f 92       	push	r6
    3544:	7f 92       	push	r7
    3546:	8f 92       	push	r8
    3548:	9f 92       	push	r9
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	ca 1b       	sub	r28, r26
    3564:	db 0b       	sbc	r29, r27
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	09 94       	ijmp

00003572 <__epilogue_restores__>:
    3572:	2a 88       	ldd	r2, Y+18	; 0x12
    3574:	39 88       	ldd	r3, Y+17	; 0x11
    3576:	48 88       	ldd	r4, Y+16	; 0x10
    3578:	5f 84       	ldd	r5, Y+15	; 0x0f
    357a:	6e 84       	ldd	r6, Y+14	; 0x0e
    357c:	7d 84       	ldd	r7, Y+13	; 0x0d
    357e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3580:	9b 84       	ldd	r9, Y+11	; 0x0b
    3582:	aa 84       	ldd	r10, Y+10	; 0x0a
    3584:	b9 84       	ldd	r11, Y+9	; 0x09
    3586:	c8 84       	ldd	r12, Y+8	; 0x08
    3588:	df 80       	ldd	r13, Y+7	; 0x07
    358a:	ee 80       	ldd	r14, Y+6	; 0x06
    358c:	fd 80       	ldd	r15, Y+5	; 0x05
    358e:	0c 81       	ldd	r16, Y+4	; 0x04
    3590:	1b 81       	ldd	r17, Y+3	; 0x03
    3592:	aa 81       	ldd	r26, Y+2	; 0x02
    3594:	b9 81       	ldd	r27, Y+1	; 0x01
    3596:	ce 0f       	add	r28, r30
    3598:	d1 1d       	adc	r29, r1
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	ed 01       	movw	r28, r26
    35a6:	08 95       	ret

000035a8 <_exit>:
    35a8:	f8 94       	cli

000035aa <__stop_program>:
    35aa:	ff cf       	rjmp	.-2      	; 0x35aa <__stop_program>
